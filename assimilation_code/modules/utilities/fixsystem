#!/bin/sh 
#
# DART software - Copyright UCAR. This open source software is provided
# by UCAR, "as is", without charge, subject to all terms of use at
# http://www.image.ucar.edu/DAReS/DART/DART_download
#
#
# usage: fixsystem your_fortran_command_name [ files to change ]
#    fortran names such as: ifort, pgf90, gfortran, g95, xlf90, etc
#    default filenames are mpi_utilities_mod.f90 and null_mpi_utilities_mod.f90
#    other filenames can be given instead
#
# this script updates the mpi source files for any compiler-dependent
# changes needed before building.  these changes should be handled
# by the compiler preprocessor, except that on systems with 
# case-insensitive filesystems (e.g. macs with OSX), bob.F90 
# and bob.f90 are the same file and the preprocessor bombs.
# 
# there are currently two code blocks of interest:  1) the fortran
# interface block declaring the system() function, and 2) some
# NAG-specific external use lines.
#
# the DART code uses system() to run a shell script or command and 
# wait for the command exit code, e.g.:  rc = system("/bin/date")
# for all compilers, except gfortran, an interface block is required
# to define the integer return from the system function.  however
# the gfortran compiler gives an error if this block is defined.
#
# this script enables and disables these interface blocks by
# looking for a pair of specially formatted comment lines and
# commenting in (or out) all the lines between those comment 
# delimiter lines.
#
# this script requires at least one argument - the name the
# fortran compiler is invoked with, e.g. ifort, xlf90, pgf90, etc.
# by default mpi_utilities_mod.f90 and null_mpi_utilities_mod.f90
# will be examined and changed if needed.  other filenames can be
# given instead and they will be processed instead of these.
#

# default file list, and both marker strings must exist in these files
export FLIST="mpi_utilities_mod.f90 null_mpi_utilities_mod.f90"
export STRINGS_REQUIRED=1

# compiler name required.  additional filenames optional.
# if filenames are given, they replace the defaults
if [ $# = 0 ]; then
    echo invalid usage, 1 argument required by $0
    echo "usage: $0 your_fortran_command_name [ filenames to modify  ]"
    echo "  e.g. $0 gfortran"
    echo "  or   $0 ifort "
    echo "  or   $0 pgf90 "
    echo "  etc."
    exit 1
elif [ $# = 1 ]; then
    # first arg: the name of your fortran compiler command
    export COMPILER=$1
    shift
else
    # first arg: the name of your fortran compiler command
    # additional args: list of filenames to process
    # not a fatal error if files don't contain marker strings
    export COMPILER=$1
    shift
    export FLIST="$*"
    export STRINGS_REQUIRED=0
fi


# based on the compiler, what needs doing?
# "out" means comment the code block out
# "in" means remove comment character so the
#      code will be compiled.
# currently there are two different code blocks
# that need to be handled.  

if [ "$COMPILER" = gfortran ]; then
  export todo1=out
  export todo2=out
elif [ "$COMPILER" = nagfor ]; then
  export todo1=out
  export todo2=in
else
  export todo1=in
  export todo2=out
fi

# check each file in the list

for f in $FLIST
do

  # figure out what state the source file is in before we start
  export bline1="`fgrep SYSTEM_BLOCK_EDIT ${f} | grep START | head -n 1`"
  if [ "`echo $bline1 | grep COMMENTED_OUT`" != ""  ]; then
    export before1=out
  elif [ "`echo $bline1 | grep COMMENTED_IN`" != ""  ]; then
    export before1=in
  else
    if [ $STRINGS_REQUIRED = 0 ]; then
      before1=none
    else
      echo ${f} not found, or does not have the right comment string to
      echo automatically change the system interface block via script.
      echo Please restore original file from the repository
      echo and try again.
      exit 1
    fi
  fi
  
  # NAG sections have both in and out - but NAG_BLOCK_EDIT is key
  export bline2="`fgrep NAG_BLOCK_EDIT ${f} | grep START | head -n 1`"
  if [ "`echo $bline2 | grep COMMENTED_OUT`" != ""  ]; then
    export before2=out
  elif [ "`echo $bline2 | grep COMMENTED_IN`" != ""  ]; then
    export before2=in
  else
    if [ $STRINGS_REQUIRED = 0 ]; then
      before2=none
    else
      echo ${f} not found, or does not have the right comment string to
      echo automatically change the NAG interface block via script.
      echo Please restore original file from the repository
      echo and try again.
      exit 1
    fi
  fi

  # if neither marker string is found, loop without complaint.
  if ([ $before1 = none ] && [ $before2 = none ]); then continue; fi

  # if we are already in the right state, loop to next file
  if ([ $before1 = $todo1 ] && [ $before2 = $todo2 ]); then continue; fi
 
  # save original copy for backup if one does not already exist.
  if [ ! -f ${f}.orig ]; then
    cp -p ${f} ${f}.orig
  fi
  
  # say what compiler we are doing this for, and move the existing
  # code into a temporary file so the sed command does not overwrite it.
  echo Setting for $COMPILER compiler in ${f}
  mv ${f} tempfile

  # removing comment chars, enabling interface block code
  if [ $todo1 = in ]; then
   sed -e '/SYSTEM_BLOCK_EDIT START COMMENTED_OUT/,/SYSTEM_BLOCK_EDIT END COMMENTED_OUT/s/^!//' \
       -e '/\(SYSTEM_BLOCK_EDIT [A-Z][A-Z]*\) COMMENTED_OUT/s//\1 COMMENTED_IN/' tempfile > ${f}
   mv ${f} tempfile
  fi
  
  # adding comment chars, disabling interface block code
  if [ $todo1 = out ]; then
   sed -e '/SYSTEM_BLOCK_EDIT START COMMENTED_IN/,/SYSTEM_BLOCK_EDIT END COMMENTED_IN/s/^/!/' \
       -e '/\(SYSTEM_BLOCK_EDIT [A-Z][A-Z]*\) COMMENTED_IN/s//\1 COMMENTED_OUT/' tempfile > ${f}
   mv ${f} tempfile
  fi

  # removing comment chars, enabling NAG specific block code
  # non-nag section headers cannot match nag headers.
  if [ $todo2 = in ]; then
   sed -e '/NAG_BLOCK_EDIT START COMMENTED_OUT/,/NAG_BLOCK_EDIT END COMMENTED_OUT/s/^!//' \
       -e '/\(NAG_BLOCK_EDIT [A-Z][A-Z]*\) COMMENTED_OUT/s//\1 COMMENTED_IN/' \
       -e '/OTHER_BLOCK_EDIT START COMMENTED_IN/,/OTHER_BLOCK_EDIT END COMMENTED_IN/s/^/!/' \
       -e '/\(OTHER_BLOCK_EDIT [A-Z][A-Z]*\) COMMENTED_IN/s//\1 COMMENTED_OUT/' tempfile > ${f}
  fi
  
  # adding comment chars, disabling NAG specific block code
  if [ $todo2 = out ]; then
   sed -e '/NAG_BLOCK_EDIT START COMMENTED_IN/,/NAG_BLOCK_EDIT END COMMENTED_IN/s/^/!/' \
       -e '/\(NAG_BLOCK_EDIT [A-Z][A-Z]*\) COMMENTED_IN/s//\1 COMMENTED_OUT/' \
       -e '/OTHER_BLOCK_EDIT START COMMENTED_OUT/,/OTHER_BLOCK_EDIT END COMMENTED_OUT/s/^!//' \
       -e '/\(OTHER_BLOCK_EDIT [A-Z][A-Z]*\) COMMENTED_OUT/s//\1 COMMENTED_IN/' tempfile > ${f}
  fi

  \rm -f tempfile

done

exit 0

