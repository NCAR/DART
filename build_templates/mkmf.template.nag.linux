# Template for NAG Fortran Compiler on Linux clusters and workstations.
#
# DART software - Copyright UCAR. This open source software is provided
# by UCAR, "as is", without charge, subject to all terms of use at
# http://www.image.ucar.edu/DAReS/DART/DART_download
#
# DART $Id$

# typical use with mkmf
# mkmf -t mkmf.template.xxxx ...
#
# FFLAGS   useful for DEBUGGING.
#          information if you LEAVE the object and module files intact.
#          Do not remove the *.o and *.mod files when debugging code.
#
#     -g       include debugging information.  these are all synonyms.
#     -O0      setting -g will make this the default (no optimization).
#              it is possible to set -g and then explicitly set -O2 if
#              the behavior being debugged depends on optimization changes.
#
# FFLAGS   useful for bitwise reproducibility and accuracy control
#          (these will slow down performance to various degrees)
#
# FFLAGS   useful for production
#     -O2        default.  optimize without too much unrepeatable numerical games
#     -O3        more aggressive optimizations.  check numerical differences
#                before using this indiscriminately.
#     -O1        if you get compile-time errors about out of memory or unable to
#                complete compilation because of complexity, try lowering the
#                optimization level on the offending source files.
#
# FFLAGS   possibly useful, not normally used by DART
#
# Runtime environment variables that influence the compiler behavior:
#
#
# IF YOU HAVE MORE CURRENT COMPILER INFORMATION, PLEASE SHARE IT WITH US.

MPIFC = mpif90
MPILD = mpif90
FC = nagfor
LD = nagfor

# DISCUSSION ABOUT NETCDF. DART works with both V3 and V4 flavors of netCDF.
# Some V4 installations also require the HDF5 libraries. Some don't.
# Some netCDF installations require both -lnetcdff and -lnetcdf, some only
# require -lnetcdf. The permutations make it difficult to cover the possible
# installations. Here are some candidates, you might just have to resort to
# trial and error:
# LIBS = -L$(NETCDF)/lib -lnetcdf
# LIBS = -L$(NETCDF)/lib -lnetcdff -lnetcdf
# LIBS = -L$(NETCDF)/lib -lnetcdf           -lcurl -lhdf5_hl -lhdf5 -lz -lm
# LIBS = -L$(NETCDF)/lib -lnetcdff -lnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm
#
# If you get an error "ld: library not found for -lnetcdff" (note 2 f's),
# remove it from the LIBS line. The same is true for any library. If 'ld'
# does not complain - it worked.

# If your NETCDF environment variable is not set correctly,
# uncomment the following line and set value to where lib and include
# are found for the netcdf files that match this compiler.
#
# NETCDF = /opt/local
NETCDF = /usr/local/netcdf_c-4.3.2_f-4.4.1-nag-6.0

INCS = -I$(NETCDF)/include
LIBS = -L$(NETCDF)/lib -lnetcdff -lnetcdf
FFLAGS  = -O $(INCS)
LDFLAGS = $(FFLAGS) $(LIBS)

# for development or debugging, use this instead:
# FFLAGS = -g -C $(INCS)
#
#
# Some optimized (BLAS, LAPACK) libraries may be available with:
# LIBS = -L$(NETCDF)/lib -lnetcdff -lnetcdf -lmkl -lmkl_lapack -lguide -lpthread
#

# <next few lines under version control, do not edit>
# $URL$
# $Revision$
# $Date$
