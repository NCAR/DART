# Template for Lahey F95 Compiler on Linux clusters and workstations
#
# DART software - Copyright UCAR. This open source software is provided
# by UCAR, "as is", without charge, subject to all terms of use at
# http://www.image.ucar.edu/DAReS/DART/DART_download
#
# DART $Id$

# typical use with mkmf
# mkmf -t mkmf.template.xxxx ...
#
# FFLAGS   useful for benchmarking
#    --ap                    preserve arithmetic accuracy in the face of optimization
#    -Ktrap=fp               trap floating point exceptions and EXIT
#    -pc 64                  use 64bit register precision (useful for comparison)
#    -v                      verbose compile
#    -O0                     no optimization
#
# FFLAGS
#    -O2
#    -ap                 ensure consistent arithmetic precision
#    -Wa,--32            pass on to loader ... (32 bit compile)
#    --trap              trap ndp exceptions
#    --verbose
#    --warn
#    --wide
#    --O0    no optimization
#    --chk [<args>]
#             check for:
#                subscripts and substrings out of bounds,
#                interface mismatches,
#                uninitialized variables.
#             Arguments can be combined (separated by commas).
#         <args>:
#             a   argument checking.
#             e   array expression shape checking.
#             s   subscript checking.
#             u   undefined variable checking.
#             x   extra checking.
#    --chkglobal
#    --verbose
#    --wo     warn if obsolescent feature
#
# FFLAGS   useful for production
#    --li    use Lahey intrinsic procedures
#    --o1    classical, memory, and interprocedural optimizations
#    --o2    -o1 + loop and array optimizations
#    --sse2  optimize using SSE2 instructions
#
# FFLAGS   for historical reasons
#    --dbl   does the autopromotion
# NOTE: 'noieee' "... produces results that differ from the correctly rounded
#                 result by no more than 3 units in the last place."
#
# IF YOU HAVE MORE CURRENT COMPILER INFORMATION, PLEASE SHARE IT WITH US.

MPIFC = mpif90
MPILD = mpif90
FC = lf95
LD = lf95

# DISCUSSION ABOUT NETCDF. DART works with both V3 and V4 flavors of netCDF.
# Some V4 installations also require the HDF5 libraries. Some don't.
# Some netCDF installations require both -lnetcdff and -lnetcdf, some only
# require -lnetcdf. The permutations make it difficult to cover the possible
# installations. Here are some candidates, you might just have to resort to
# trial and error:
# LIBS = -L$(NETCDF)/lib -lnetcdf
# LIBS = -L$(NETCDF)/lib -lnetcdff -lnetcdf
# LIBS = -L$(NETCDF)/lib -lnetcdf           -lcurl -lhdf5_hl -lhdf5 -lz -lm
# LIBS = -L$(NETCDF)/lib -lnetcdff -lnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm
#
# If you get an error "ld: library not found for -lnetcdff" (note 2 f's),
# remove it from the LIBS line. The same is true for any library. If 'ld'
# does not complain - it worked.

# If your NETCDF environment variable is not set correctly,
# uncomment the following line and set value to where lib and include
# are found for the netcdf files that match this compiler.
#
# NETCDF = /opt/local

INCS = -I$(NETCDF)/include
LIBS = -L$(NETCDF)/lib -lnetcdff -lnetcdf
FFLAGS  = -Wa,--32 --wide --o2 $(INCS)
LDFLAGS = $(FFLAGS) $(LIBS)

# for debugging or development, here are some suggested flags:
#FFLAGS = --ap --trap --warn --wide --chk a,s,u,x --o0 $(INCS)

# <next few lines under version control, do not edit>
# $URL$
# $Revision$
# $Date$
