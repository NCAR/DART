# Template for RTTOV settings with GNU gfortran on Linux or OSX 
#
# DART software - Copyright UCAR. This open source software is provided
# by UCAR, "as is", without charge, subject to all terms of use at
# http://www.image.ucar.edu/DAReS/DART/DART_download

# typical use with mkmf
# mkmf -t mkmf.template.xxxx ...
#
# Suggested (perhaps required) flags:
# -ffree-line-length-none   handles "long" lines - i.e. longer than 72 chars
#
# Suggested debugging flags:
#  -g                  add debugging information to executable
#  -Wuninitialized     catch uninitialized variables
#  -Wunused            issue warning for unused variables - keeps code clean
#  -fbacktrace         runtime errors try to print out a stack backtrace
#  -fbounds-check      add runtime-checking for out-of-range array indices
#  -ffpe-trap=invalid,zero,overflow
#                      stop on floating point errors
#
#  earlier versions of this mkmf file listed 'precision' as one of the options on
#  the fpe-trap line.  this is not recommended anymore as some of the gfortran internal
#  routines will trap, as well as some perfectly valid DART computations.
#
# Generally not needed but possibly useful for non-DART code:
#
# -ffree-form          forces input file to be read as free format regardless
#                      of what file extension it has.
#
# -fdefault-real-8     force all real variables to be real*8.  not needed for DART code
#                      since all real variables in DART are declared with a size.
#
#    NOTE: Some previous versions of the gfortran compiler (including 4.1.2)
#    changed the record marker size to 8 bytes, which made binary files written
#    with the 'unformatted' option unreadable by programs compiled with other
#    compilers.  Later versions of the compiler changed the default back to 4 bytes.
#    If you have a version that defaults to 8 byte record markers, use this 
#    compile time flag:
#       -frecord-marker=4
#    If you have files written by older versions of the gfortran compiler that
#    cannot be read now, try this compile time flag:
#       -frecord-marker=8 
#
# Convert big-endian or little-endian binary files at runtime:
#
# setenv GFORTRAN_CONVERT_UNIT 'big_endian'
#    Treats ALL units as big_endian
#
# setenv GFORTRAN_CONVERT_UNIT 'big_endian;native:10-20'
#    Treats units 10-20 as big_endian but the rest are 'native' 
#
# for more information on unit conversions:
# http://gcc.gnu.org/onlinedocs/gfortran/GFORTRAN_005fCONVERT_005fUNIT.html#GFORTRAN_005fCONVERT_005fUNIT
#

MPIFC = mpif90
MPILD = mpif90
FC = gfortran
LD = gfortran

# MODIFY THE FOLLOWING VARIABLES FOR YOUR SYSTEM:
# If your NETCDF, HDF5, or RTTOV environment variables are not set,
# uncomment the following line and set value to where lib and include
# are found for the netcdf files that match this compiler.
# Since netCDF can be built with HDF5, many systems have the HDF5
# installation in the same place as netCDF.
#
# NETCDF = /usr/lib/x86_64-linux-gnu
# HDF5 = $(NETCDF)
# RTTOV = /glade/campaign/cisl/dares/libraries/rttov132_gfortran/

RTTOV_VERSION = 13

RTLIBS = -lrttov$(RTTOV_VERSION)_wrapper    -lrttov$(RTTOV_VERSION)_mw_scatt -lrttov$(RTTOV_VERSION)_brdf_atlas \
         -lrttov$(RTTOV_VERSION)_emis_atlas -lrttov$(RTTOV_VERSION)_other    -lrttov$(RTTOV_VERSION)_parallel \
         -lrttov$(RTTOV_VERSION)_coef_io    -lrttov$(RTTOV_VERSION)_hdf      -lrttov$(RTTOV_VERSION)_main 

INCS = -I$(NETCDF)/include -I$(HDF5)/include -I$(RTTOV)/include -I$(RTTOV)/mod

# Note some versions of hdf5 need -lhdf5hl_fortran instead of -lhdf5_hl_fortran
LIBS = -L$(NETCDF)/lib -lnetcdff -lnetcdf \
       -L$(HDF5)/lib -lhdf5_hl_fortran -lhdf5_hl -lhdf5_fortran -lhdf5 \
       -L$(RTTOV)/lib  $(RTLIBS) 

FFLAGS  = -O2 -ffree-line-length-none $(INCS)
LDFLAGS = $(FFLAGS) $(LIBS)

# Debug settings (preferably also use a RTTOV compiled with debug settings):
#
#FFLAGS = -g -Wuninitialized -Wunused -ffree-line-length-none -fbounds-check \
#          -fbacktrace -ffpe-trap=invalid,zero,overflow $(INCS)

