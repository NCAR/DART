#!/bin/csh
#
# DART software - Copyright UCAR. This open source software is provided
# by UCAR, "as is", without charge, subject to all terms of use at
# http://www.image.ucar.edu/DAReS/DART/DART_download
#
# DART $Id$

# ---------------------
# Purpose
# ---------------------
#
# This script integrates DART with a pre-existing CESM multi-instance case.
# It must be run from a valid CASEROOT directory and some environment variables
# must be set (as in cesm#_#/setup_XXX). 
#
# CAM is the only model component used for assimilation.
# CESM starts and stops to allow for CAM to assimilate every 6 hours.
#
# This script will try to build the DART executables if they are not found.
# This might result in a preproc_nml being used, which is wrong for your observation set.
#
# There are many CESM binary files in big-endian format, and DART reads
# some of them, so you MUST compile DART accordingly e.g.,
# ifort -convert big_endian
# Contact dart@ucar.edu if you want to use another compiler.
#
# ---------------------
# How to set up the script
# ---------------------
#
# -- Copy and rename this script into the $CASEROOT directory.
#    > cp DART_config.template $CASEROOT/DART_config
# -- Ensure DARTROOT references a valid DART directory.
# -- Examine the whole script to identify things to change for your experiments.
#    This includes choosing [no_]assimilate.csh.
# -- Provide any initial inflation files needed by your run
# -- Run this script.
#    > ./DART_config | & tee DART_config.out1  
# -- Edit the DART input.nml, that appears in the ${CASEROOT} directory,
#    to replace default values with your preferred values.
#
# -- Submit the job using ${CASEROOT}/${CASE}.submit
#
# ==============================================================================
# Get the environment of the case - defines number of instances/ensemble size ...
# Each model component has their own number of instances.
# ==============================================================================

echo "==================="
echo "Starting DART_config"
echo "==================="

# baseobsdir    Part of the directory name containing the obs_seq.out files to be used by the 
#               assimilation.  Assimilate.csh looks for a directory with the year and month:
#               $baseobsdir/YYYYMM_6H_CESM.
#               Will be inherited by CESM#_#_DART_config and inserted into assimilate.csh
# save_every_Mth_day_restarts       
#               assimilate.csh uses this to remove extraneous restart sets in the DART context.  
#               This permits more cycles per job and reduces the data volume that's st_archived.

# DART_SCRIPTS_DIR should be set to the DART directory from which this script was copied,
# and which contains the setup_ script used to build the CASE, 
# and the assimilate.csh which will run the assimilation.

setenv DARTROOT               your_dart_path
setenv DART_SCRIPTS_DIR       $DARTROOT/models/cam-fv/shell_scripts/your_setup_script_dir
echo "DART_SCRIPTS_DIR = $DART_SCRIPTS_DIR"

# /glade/p/image/Observations/NCEP+ACARS
setenv BASEOBSDIR             your_observation_path

setenv SAVE_EVERY_MTH_RESTART days_between_archiving_restarts

# The ensemble size can't be fetched from CESM's .xml files 
# because in the multi-driver mode there's 1 instance per coupler, not num_instances.
set list = `grep 'setenv num_instances' setup_* `
setenv num_instances $list[3]

if ( ! -e ./xmlquery ) then
   echo "ERROR: $0 must be run from a CASEROOT directory".
   exit 1
endif

setenv CASE          `./xmlquery CASE           --value`
setenv CASEROOT      `./xmlquery CASEROOT       --value`
setenv COMPSET       `./xmlquery COMPSET        --value`
setenv EXEROOT       `./xmlquery EXEROOT        --value`

# ==============================================================================
# Turn on the assimilation in CESM

# The assimilation script to be run is determined by 
# CESM's env_run.xml DATA_ASSIMILATION* variables.
# If DATA_ASSIMILATION = false (default), then neither {no_}assimilate.csh will be run,
# and CAM restart files (instead of initial) will be used after the first cycle.
# So always set DATA_ASSIMILATION = TRUE.
# DATA_ASSIMILATION_CYCLES says how many cycles to run in each job.  
# It's wise to set to 1 for the first cycle, so that successfull completion can be
# verified before using lots of resources.
# When the job (not each cycle) is finished the short_term archiver may run 
# as a separate job and, if RESUBMIT > 0, (re)submit a new case.run job.
./xmlchange DATA_ASSIMILATION_ATM=TRUE
./xmlchange DATA_ASSIMILATION_CYCLES=1

# The default is to tell CESM to use no_assimilate.csh.
# If this script is run by setup_advanced, use one of its environment variables 
# to turn on assimilation.  
# In any case, you can change the value of DATA_ASSIMILATION_SCRIPT in env_run.xml.
./xmlchange                 DATA_ASSIMILATION_SCRIPT=${CASEROOT}/no_assimilate.csh
if ($?CIMEROOT) ./xmlchange DATA_ASSIMILATION_SCRIPT=${CASEROOT}/assimilate.csh

# ==============================================================================

# ==============================================================================
# Set the system commands to avoid user's aliases.
# ==============================================================================

set nonomatch       # suppress "rm" warnings if wildcard does not match anything

# The FORCE options are not optional.
# The VERBOSE options are useful for debugging though
# some systems don't like the -v option to any of the following.
set   MOVE = '/bin/mv -f'
set   COPY = '/bin/cp -f --preserve=timestamps'
set   LINK = '/bin/ln -fs'
set REMOVE = '/bin/rm -fr'

echo ""

# ==============================================================================
# make sure the required directories exist
# VAR is the shell variable name, DIR is the value
# ==============================================================================

# Make a place to store inflation restarts to protect from purging until
# st_archive can make a home for them.
if (! -d ${EXEROOT}/archive/esp/hist) mkdir -p ${EXEROOT}/archive/esp/hist

# foreach VAR ( CASEROOT DARTROOT )
#    set DIR = `eval echo \${$VAR}`
#    if ( ! -d $DIR ) then
foreach DIR ( $CASEROOT $DART_SCRIPTS_DIR ${EXEROOT}/archive/esp/hist)
   if ( ! -d $DIR ) then
      echo "ERROR: directory '$DIR' not found"
      echo "       In the setup script check the setting of: $VAR"
      exit 10
   endif
end

# ==============================================================================
# Make sure the DART executables exist or build them if we can't find them.
# The DART input.nml in the model directory IS IMPORTANT during this part
# because it defines what observation types are supported.
# ==============================================================================

foreach MODEL ( cam-fv )
   set targetdir = $DARTROOT/models/$MODEL/work
   if ( ! -x $targetdir/filter ) then
      echo ""
      echo "WARNING: executable file 'filter' not found."
      echo "         Looking for: $targetdir/filter "
      echo "         Trying to rebuild all executables for $MODEL now ..."
      echo "         This will be incorrect, if input.nml:preprocess_nml is not correct."
      (cd $targetdir; ./quickbuild.csh -mpi)
      if ( ! -x $targetdir/filter ) then
         echo "ERROR: executable file 'filter' not found."
         echo "       Unsuccessfully tried to rebuild: $targetdir/filter "
         echo "       Required DART assimilation executables are not found."
         echo "       Stopping prematurely."
         exit 20
      endif
   endif
end

# ==============================================================================
# Stage the required parts of DART in the CASEROOT directory.
# ==============================================================================

sed -e "s#BOGUSNUMINST#$num_instances#" \
    ${DART_SCRIPTS_DIR}/no_assimilate.csh.template > no_assimilate.csh || exit 30

sed -e "s#BOGUSBASEOBSDIR#$BASEOBSDIR#"  \
    -e "s#BOGUS_save_every_Mth#$SAVE_EVERY_MTH_RESTART#" \
    ${DART_SCRIPTS_DIR}/assimilate.csh.template  > assimilate.csh  || exit 40

chmod 755 assimilate.csh
chmod 755 no_assimilate.csh
# chmod 755 perfect_model.csh

# ==============================================================================
# Stage the DART executables in the CESM execution root directory: EXEROOT
# If you recompile the DART code (maybe to support more observation types)
# we're making a script to make it easy to install new DART executables.
# ==============================================================================

cat << EndOfText >! stage_dart_files
#!/bin/sh

# Run this script in the ${CASEROOT} directory.
# This script copies over the dart executables and POSSIBLY a namelist
# to the proper directory.  If you have to update any dart executables,
# do it in the ${DARTROOT} directory and then rerun stage_dart_files.
# If an input.nml does not exist in the ${CASEROOT} directory,
# a default one will be copied into place.
#
# This script was autogenerated by $0 using the variables set in that script.

if [[ -e input.nml ]]; then
   echo "stage_dart_files: Using existing ${CASEROOT}/input.nml"
   if [[ -e input.nml.original ]]; then
      echo "input.nml.original already exists - not making another"
   else
      ${COPY} input.nml input.nml.original
   fi

elif [[ -e ${DARTROOT}/models/cam-fv/work/input.nml ]]; then
   ${COPY} ${DARTROOT}/models/cam-fv/work/input.nml  input.nml
   if [[ -x update_dart_namelists ]]; then
          ./update_dart_namelists
   fi
else
   echo "ERROR: stage_dart_files could not find an input.nml.  Aborting"
   exit 50
fi

${COPY} ${DARTROOT}/models/cam-fv/work/filter                 ${EXEROOT}
${COPY} ${DARTROOT}/models/cam-fv/work/perfect_model_obs      ${EXEROOT}
${COPY} ${DARTROOT}/models/cam-fv/work/fill_inflation_restart ${EXEROOT}

exit 0

EndOfText
chmod 0755 stage_dart_files

./stage_dart_files  || exit 60

# ==============================================================================
# Ensure the DART namelists are consistent with the ensemble size,
# suggest settings for num members in the output diagnostics files, etc.
# The user is free to update these after setup and before running.
# ==============================================================================

# If we are using WACCM{-X} (i.e. WCxx or WXxx) we have preferred namelist values.
# Extract pieces of the COMPSET for choosing correct setup parameters.
# E.g. "AMIP_CAM5_CLM50%BGC_CICE%PRES_DOCN%DOM_MOSART_CISM1%NOEVOLVE_SWAV"
set comp_list = `echo $COMPSET   | sed -e "s/_/ /g"`
set waccm = "false"
set atm = `echo $comp_list[2] | sed -e "s#%# #"`
if ($#atm > 1) then
   echo $atm[2] | grep WC 
   if ($status == 0) set waccm = "true"
endif

cat << EndOfText >! update_dart_namelists
#!/bin/sh

# This script makes certain namelist settings consistent with the number
# of ensemble members built by the setup script.
# This script was autogenerated by $0 using the variables set in that script.

# Ensure that the input.nml ensemble size matches the number of instances.
# WARNING: the output files contain ALL ensemble members ==> BIG

ex input.nml <<ex_end
g;ens_size ;s;= .*;= ${num_instances};
g;num_output_state_members ;s;= .*;= ${num_instances};
g;num_output_obs_members ;s;= .*;= ${num_instances};
wq
ex_end

if [[ "$waccm" = "true" ]]; then 
   list=\`grep '^[ ]*vertical_localization_coord' input.nml | sed -e "s#[=,]##g"\`
   if [[ "\$list[3]" = "SCALEHEIGHT" ]]; then
      list=`grep '^[ ]*vert_normalization_scale_height' input.nml | sed -e "s#[=,]##g"`
      if [[ "\$list[2]" != "1.5" ]]; then
         echo "WARNING!  input.nml is not using 1.5 for vert_normalization_scale_height."
         echo "          Use a different value only if you definitely want to. "
      fi
   else
      echo "WARNING!  input.nml is not using SCALEHEIGHT for vertical_localization_coord."
      echo "          SCALEHEIGHT is highly recommended for WACCM{-X}"
   fi
else
   echo "This model is not configured for WACCM"
   echo "COMPSET is $COMPSET"
fi

exit 0

EndOfText
chmod 0755 update_dart_namelists

./update_dart_namelists || exit 70

#=========================================================================
# Stage the files needed for SAMPLING ERROR CORRECTION - even if not
# initially requested. The file is static, small, and may be needed later.
#
# If it is requested and is not present ... it is an error.
#
# The sampling error correction is a lookup table.  A selection of common
# ensemble sizes should be found in the file named below.
# It is only needed if
# input.nml:&assim_tools_nml:sampling_error_correction = .true.,
#=========================================================================

if ( $num_instances > 1 ) then
   set SAMP_ERR_FILE = \
       ${DARTROOT}/assimilation_code/programs/gen_sampling_err_table/work/sampling_error_correction_table.nc

   if (  -e   ${SAMP_ERR_FILE} ) then
      ${COPY} ${SAMP_ERR_FILE} .
   else
      echo ""
      echo "WARNING: no sampling_error_correction_table.nc file found."
      echo "         This file is NOT needed unless you want to turn on the"
      echo "         sampling_error_correction feature in any of the models."
      echo ""
      
      set list = `grep sampling_error_correction input.nml | sed -e "s/[=\.,]//g`
      if ($list[2] == "true") exit 80

   endif
   
endif

# ==============================================================================
# What to do next
# ==============================================================================


cat << EndOfText >! DART_instructions.txt

-------------------------------------------------------------------------

Check the DART configuration:

1) The default behavior is to invoke DART (set in setup_{hybrid,advanced,...).
   If your confidence is not high that the CESM configuration will be correct,
   we recommend turning off the assimilation at first.

2) If you want to turn off DART, edit the env_run.xml: DATA_ASSIMILATION_* 
   to disable running a DART script (assimilate.csh or perfect_model.csh)
   after the model forecast.

3) Modify what you need to in the DART namelist file, i.e. ${CASEROOT}/input.nml

4) If you have recompiled any part of the DART system, 'stage_dart_files'
   will copy them into the correct places.

5) If you stage your own inflation files, make sure you read the INFLATION section
   in ${CASEROOT}/DART_config

6) Make sure the observation directory name in assimilate.csh or perfect_model.csh 
   matches the one on your system.

7) Submit the CESM job in the normal way.

8) You can use ${CASEROOT}/stage_cesm_files
    to stage files to restart a run.

-------------------------------------------------------------------------

EndOfText

cat DART_instructions.txt

exit 0

# <next few lines under version control, do not edit>
# $URL$
# $Revision$
# $Date$
