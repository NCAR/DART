&assim_model_nml
  write_binary_restart_files = .true.
  netcdf_large_file_support  = .true.
/


&assim_tools_nml
  filter_kind                     = 1
  cutoff                          = 0.2
  sort_obs_inc                    = .false.
  spread_restoration              = .false.
  sampling_error_correction       = .true.
  adaptive_localization_threshold = -1
  output_localization_diagnostics = .false.
  localization_diagnostics_file   = 'localization_diagnostics'
  print_every_nth_obs             = 10000
/


&cam_to_dart_nml
  cam_to_dart_input_file  = 'caminput.nc'
  cam_to_dart_output_file = 'perfect_ics'
/


&cov_cutoff_nml
  select_localization = 1
/


&dart_to_cam_nml
  dart_to_cam_input_file  = 'perfect_restart'
  dart_to_cam_output_file = 'caminput.nc'
  advance_time_present    = .false.
/


&ensemble_manager_nml
  single_restart_file_in  = .true.
  single_restart_file_out = .true.
  perturbation_amplitude  = 0.0
/


&location_nml
  horiz_dist_only             = .false.
  vert_normalization_pressure = 100000.0
  vert_normalization_height   = 10000.0
  vert_normalization_level    = 26.0
  approximate_distance        = .true.
  nlon                        = 141
  nlat                        = 72
  output_box_info             = .false.
/


&model_nml
  output_state_vector       = .false.
  model_version             = '4.0.1'
  model_config_file         = 'caminput.nc'
  state_num_0d              = 0
  state_num_1d              = 0
  state_num_2d              = 1
  state_num_3d              = 6
  state_names_2d            = 'PS'
  state_names_3d            = 'T', 'US', 'VS', 'Q', 'CLDLIQ', 'CLDICE'
  which_vert_1d             = 0
  which_vert_2d             = -1
  which_vert_3d             = 6*1
  pert_names                = ''
  pert_sd                   = -888888.0d0
  pert_base_vals            = -888888.0d0
  highest_obs_pressure_mb   = 1.0
  highest_state_pressure_mb = 1.0
  max_obs_lat_degree        = 89.0
  time_step_seconds         = 43200
  time_step_days            = 0
  print_details             = .false.
/


&mpi_utilities_nml
/


&obs_def_gps_nml
  max_gpsro_obs = 100000
/


&obs_kind_nml
  assimilate_these_obs_types = 'RADIOSONDE_TEMPERATURE',
                               'RADIOSONDE_U_WIND_COMPONENT',
                               'RADIOSONDE_V_WIND_COMPONENT'
/


&obs_sequence_nml
  write_binary_obs_sequence = .false.
/


&perfect_model_obs_nml
  start_from_restart       = .true.
  output_restart           = .true.
  async                    = 0
  tasks_per_model_advance  = 1
  init_time_days           = -1
  init_time_seconds        = -1
  first_obs_days           = -1
  first_obs_seconds        = -1
  last_obs_days            = -1
  last_obs_seconds         = -1
  output_timestamps        = .true.
  trace_execution          = .true.
  output_forward_op_errors = .false.
  print_every_nth_obs      = 5000
  silence                  = .false.
  output_interval          = 1
  restart_in_file_name     = "perfect_ics"
  restart_out_file_name    = "perfect_restart"
  obs_seq_in_file_name     = "obs_seq.in"
  obs_seq_out_file_name    = "obs_seq.out"
  adv_ens_command          = "no_model_advance"
/


&preprocess_nml
  input_obs_kind_mod_file  = '../../../assimilation_code/modules/observations/DEFAULT_obs_kind_mod.F90'
  output_obs_kind_mod_file = '../../../assimilation_code/modules/observations/obs_kind_mod.f90'
  input_obs_def_mod_file   = '../../../observations/forward_operators/DEFAULT_obs_def_mod.F90'
  output_obs_def_mod_file  = '../../../observations/forward_operators/obs_def_mod.f90'
  input_files              = '../../../observations/forward_operators/obs_def_gps_mod.f90',
                             '../../../observations/forward_operators/obs_def_altimeter_mod.f90',
                             '../../../observations/forward_operators/obs_def_reanalysis_bufr_mod.f90'
/


&reg_factor_nml
  select_regression    = 1
  input_reg_file       = "time_mean_reg"
  save_reg_diagnostics = .false.
  reg_diagnostics_file = 'reg_diagnostics'
/


&utilities_nml
  termlevel      = 1
  module_details = .false.
  logfilename    = 'dart_log.out'
  nmlfilename    = 'dart_log.nml'
  write_nml      = 'file'
/




