&perfect_model_obs_nml
   read_input_state_from_file = .true.
   input_state_files          = "ENS01.2009.oce.nc"
   init_time_days             = -1
   init_time_seconds          = -1

   write_output_state_to_file = .true.
   single_file_out            = .true.
   output_state_files         = "perfect_output.nc"
   output_interval            = 1

   async                      = 0
   adv_ens_command            = "advance_model_script.die"

   obs_seq_in_file_name       = "obs_seq.in"
   obs_seq_out_file_name      = "obs_seq.out"
   first_obs_days             = -1
   first_obs_seconds          = -1
   last_obs_days              = -1
   last_obs_seconds           = -1

   trace_execution            = .true.
   output_timestamps          = .true.
   print_every_nth_obs        = 0
   output_forward_op_errors   = .false.
   silence                    = .false.
   /

# If the input and output file_lists are the same ... the input
# is OVERWRITTEN with the new state. You may preserve the input
# state by specifying the 'input' stage.

&filter_nml
   async                    = 5
   adv_ens_command          = "advance_model_script.die"
   ens_size                 = 3
   obs_sequence_in_name     = "obs_seq.out"
   obs_sequence_out_name    = "obs_seq.final"

   input_state_file_list    = "restart_file_list.txt"
   output_state_file_list   = "restart_file_list.txt"
   init_time_days           = -1
   init_time_seconds        = -1
   first_obs_days           = -1
   first_obs_seconds        = -1
   last_obs_days            = -1
   last_obs_seconds         = -1
   num_output_state_members = 3
   num_output_obs_members   = 3
   output_interval          = 1
   num_groups               = 1
   output_forward_op_errors = .false.
   output_timestamps        = .true.
   trace_execution          = .true.
   silence                  = .true.

   stages_to_write          = 'input', 'preassim'
   output_members           = .true.
   output_mean              = .true.
   output_sd                = .true.
   write_all_stages_at_end  = .false.

   inf_flavor                  = 0,                 0
   inf_initial_from_restart    = .false.,           .false.
   inf_sd_initial_from_restart = .false.,           .false.
   inf_deterministic           = .true.,            .true.
   inf_initial                 = 1.0,               1.0
   inf_lower_bound             = 1.0,               1.0
   inf_upper_bound             = 100.0,             100.0
   inf_damping                 = 0.9,               0.9
   inf_sd_initial              = 0.6,               0.6
   inf_sd_lower_bound          = 0.6,               0.6
   inf_sd_max_change           = 1.05,              1.05
   /

&state_vector_io_nml
   single_precision_output    = .false.
  /

&mpi_utilities_nml
   /

&smoother_nml
   num_lags              = 0
   start_from_restart    = .false.
   restart_in_file_name  = 'smoother_ics'
   restart_out_file_name = 'smoother_restart'
   /

&ensemble_manager_nml
   layout = 1
   tasks_per_node = 16
   /

&assim_tools_nml
   filter_kind                     = 1
   cutoff                          = 0.005
   sort_obs_inc                    = .false.
   spread_restoration              = .false.
   sampling_error_correction       = .false.
   adaptive_localization_threshold = -1
   output_localization_diagnostics = .true.
   localization_diagnostics_file   = 'localization_diagnostics'
   print_every_nth_obs             = 100
   /

&location_nml
   nlon                        = 71
   nlat                        = 36
   horiz_dist_only             = .false.
   vert_normalization_pressure = 100000.0
   vert_normalization_height   = 200.0
   vert_normalization_level    = 10.0
   approximate_distance        = .false.
   output_box_info             = .false.
   print_box_level             = 0
   /


&cov_cutoff_nml
   select_localization = 1
   /

&quality_control_nml
   input_qc_threshold       = 1.0
   outlier_threshold        = 3.0
/

&reg_factor_nml
   select_regression    = 1
   input_reg_file       = "time_mean_reg"
   save_reg_diagnostics = .false.
   reg_diagnostics_file = "reg_diagnostics"
   /

&obs_sequence_nml
   write_binary_obs_sequence = .false.
   /

# options for assimilate and evaluate include:
# (first column is the obs, second is what needs to be in the state vector
# to compute it.)
# ARGO_U_CURRENT_COMPONENT,      QTY_U_CURRENT_COMPONENT
# ARGO_V_CURRENT_COMPONENT,      QTY_V_CURRENT_COMPONENT
# ADCP_U_CURRENT_COMPONENT,      QTY_U_CURRENT_COMPONENT
# ADCP_V_CURRENT_COMPONENT,      QTY_V_CURRENT_COMPONENT
# ADCP_SALINITY,                 QTY_SALINITY
# ADCP_TEMPERATURE,              QTY_TEMPERATURE
# FLOAT_SALINITY,                QTY_SALINITY
# FLOAT_TEMPERATURE,             QTY_TEMPERATURE
# DRIFTER_U_CURRENT_COMPONENT,   QTY_U_CURRENT_COMPONENT
# DRIFTER_V_CURRENT_COMPONENT,   QTY_V_CURRENT_COMPONENT
# DRIFTER_SALINITY,              QTY_SALINITY
# DRIFTER_TEMPERATURE,           QTY_TEMPERATURE
# GLIDER_U_CURRENT_COMPONENT,    QTY_U_CURRENT_COMPONENT
# GLIDER_V_CURRENT_COMPONENT,    QTY_V_CURRENT_COMPONENT
# GLIDER_SALINITY,               QTY_SALINITY
# GLIDER_TEMPERATURE,            QTY_TEMPERATURE
# MOORING_U_CURRENT_COMPONENT,   QTY_U_CURRENT_COMPONENT
# MOORING_V_CURRENT_COMPONENT,   QTY_V_CURRENT_COMPONENT
# MOORING_SALINITY,              QTY_SALINITY
# MOORING_TEMPERATURE,           QTY_TEMPERATURE
# MOORING_PRESSURE,              QTY_PRESSURE
# BOTTLE_SALINITY,               QTY_SALINITY
# BOTTLE_TEMPERATURE,            QTY_TEMPERATURE
# CTD_SALINITY,                  QTY_SALINITY
# CTD_TEMPERATURE,               QTY_TEMPERATURE
# TCTD_SALINITY,                 QTY_SALINITY
# TCTD_TEMPERATURE,              QTY_TEMPERATURE
# STD_SALINITY,                  QTY_SALINITY
# STD_TEMPERATURE,               QTY_TEMPERATURE
# XCTD_SALINITY,                 QTY_SALINITY
# XCTD_TEMPERATURE,              QTY_TEMPERATURE
# MBT_SALINITY,                  QTY_SALINITY
# MBT_TEMPERATURE,               QTY_TEMPERATURE
# XBT_SALINITY,                  QTY_SALINITY
# XBT_TEMPERATURE,               QTY_TEMPERATURE
# DBT_SALINITY,                  QTY_SALINITY
# DBT_TEMPERATURE,               QTY_TEMPERATURE
# APB_SALINITY,                  QTY_SALINITY
# APB_TEMPERATURE,               QTY_TEMPERATURE
# DOPPLER_U_CURRENT_COMPONENT,   QTY_U_CURRENT_COMPONENT
# DOPPLER_V_CURRENT_COMPONENT,   QTY_V_CURRENT_COMPONENT
# DOPPLER_W_CURRENT_COMPONENT,   QTY_W_CURRENT_COMPONENT
# SATELLITE_MICROWAVE_SST,       QTY_TEMPERATURE
# SATELLITE_INFRARED_SST,        QTY_TEMPERATURE

# The full list of available observations are defined in obs_def_ocean_mod.f90

&obs_kind_nml
   assimilate_these_obs_types = 'FERRYBOX_SALINITY',
                                'FERRYBOX_TEMPERATURE'
   evaluate_these_obs_types = 'SALINITY',
                              'TEMPERATURE'
   /

&assim_model_nml
   write_binary_restart_files = .true.
   netCDF_large_file_support  = .true.
   /

# Each variable must have 5 entries.
# 1: variable name
# 2: DART QUANTITY
# 3: minimum value - as a character string - if none, use 'NA'
# 4: maximum value - as a character string - if none, use 'NA'
# 5: does the variable get updated in the restart file or not ...
#    only variables from restart files may be updated.
#    'UPDATE'       =>        update the variable in the FESOM file
#    'NO_COPY_BACK' => do NOT update the variable in the FESOM file
#    Note: All variables will be modified internally in DART and
#    preserved in the DART diagnostic netCDF files without being
#    range-restricted.

&model_nml
   model_analysis_filename      = 'ENS01.2009.oce.nc'
   model_clock_filename         = '../ENS01/ENS01.clock'
   diagnostic_metadata          = .true.
   assimilation_period_days     = 0
   assimilation_period_seconds  = 86400
   model_perturbation_amplitude = 0.0001
   calendar                     = 'Gregorian'
   debug                        = 0
   variables = 'salt',   'QTY_SALINITY'   , '0.0', 'NA', 'UPDATE',
               'temp',   'QTY_TEMPERATURE',  'NA', 'NA', 'UPDATE'
   /

# NOTE: h(nVertLevels,nCells,Time) is layer thickness, not SSH
#  we don't have a kind defined for thickness yet.
#  examples of other kinds which could be in state vector.
#  the temperature should really be potential temp, but the
#  conversion routines (at the end of the model_mod.f90 file)
#  are commented out here because they're for the atmosphere not ocean.
#  we need to add a case for temp vs potential temp, and conversion code.
#                    'tracer1',      'QTY_TRACER_CONCENTRATION'
#                          'u',      'QTY_EDGE_NORMAL_SPEED'
#                'temperature',      'QTY_POTENTIAL_TEMPERATURE'

&utilities_nml
   TERMLEVEL = 1
   module_details = .false.
   logfilename = 'dart_log.out'
   nmlfilename = 'dart_log.nml'
   write_nml   = 'file'
   /

&preprocess_nml
    input_obs_def_mod_file = '../../../observations/forward_operators/DEFAULT_obs_def_mod.F90'
   output_obs_def_mod_file = '../../../observations/forward_operators/obs_def_mod.f90'
   input_obs_kind_mod_file = '../../../assimilation_code/modules/observations/DEFAULT_obs_kind_mod.F90'
  output_obs_kind_mod_file = '../../../assimilation_code/modules/observations/obs_kind_mod.f90'
               input_files = '../../../observations/forward_operators/obs_def_ocean_mod.f90'
   /

&obs_sequence_tool_nml
   num_input_files   = 2
   filename_seq      = 'obs_seq.single', 'obs_seq.ferrybox'
   filename_out      = 'obs_seq.processed'
   first_obs_days = 149019
   first_obs_seconds = -1
   last_obs_days = 149020
   last_obs_seconds  = -1
   print_only        = .false.
   min_lat           = -90.0
   max_lat           =  90.0
   min_lon           =   0.0
   max_lon           = 360.0
   gregorian_cal     = .true.
   /


&fill_inflation_restart_nml
   input_state_files = 'ENS01.2009.oce.nc'
   write_prior_inf   = .true.
   prior_inf_mean    = 1.00
   prior_inf_sd      = 0.6
   write_post_inf    = .false.
   post_inf_mean     = 1.01
   post_inf_sd       = 0.61
   verbose           = .false.
   /


&restart_file_tool_nml
   input_file_name              = "filter_restart"
   output_file_name             = "filter_updated_restart"
   ens_size                     = 3
   single_restart_file_in       = .false.
   single_restart_file_out      = .false.
   write_binary_restart_files   = .true.
   overwrite_data_time          = .false.
   new_data_days                = -1
   new_data_secs                = -1
   input_is_model_advance_file  = .false.
   output_is_model_advance_file = .false.
   overwrite_advance_time       = .false.
   new_advance_days             = -1
   new_advance_secs             = -1
   gregorian_cal                = .true.
   /


! different methods to compute 'distance' from mean:
!  1 = simple absolute difference
!  2 = normalized absolute difference
!  3 = simple rmse difference
!  4 = normalized rmse difference

&closest_member_tool_nml
   input_restart_file_list = 'input_file_list.txt'
   output_file_name        = 'closest_member'
   ens_size                = 3
   single_restart_file_in  = .false.
   difference_method       = 4
   use_only_qtys           = ''
   /


&perturb_single_instance_nml
   ens_size               = 3
   input_files            = 'ENS01.2009.oce.nc'
   output_file_list       = 'restart_file_list.txt'
   perturbation_amplitude = 0.2
   /

&obs_diag_nml
   obs_sequence_name      = ''
   obs_sequence_list      = 'file_list.txt'
   first_bin_center      =  2009,  1,  1, 0, 0, 0
   last_bin_center       =  2009,  2,  1, 0, 0, 0
   bin_separation        =     0,  0,  1, 0, 0, 0
   bin_width             =     0,  0,  1, 0, 0, 0
   time_to_skip          =     0,  0,  0, 0, 0, 0
   max_num_bins          = 1000
   trusted_obs           = 'null'
   Nregions              = 1
   lonlim1               = 27.000,  20.0, 120.0
   lonlim2               = 30.000, 120.0, 270.0
   latlim1               = 40.250, -90.0, -90.0
   latlim2               = 41.125,  25.0,  90.0
   reg_names             = 'Marmara'
   create_rank_histogram = .true.
   outliers_in_histogram = .true.
   use_zero_error_obs    = .false.
   verbose               = .true.
   /

# obs_seq_to_netcdf also requires the schedule_nml.
# In this context, schedule_nml defines how many netcdf files get created.
# Each 'bin' results in an obs_epoch_xxxx.nc file.
# default is to put everything into one 'bin'.

&obs_seq_to_netcdf_nml
   obs_sequence_name = 'obs_seq.final'
   obs_sequence_list = ''
   append_to_netcdf  = .false.
   lonlim1           = 0.0
   lonlim2           = 360.0
   latlim1           = 0.0
   latlim2           = 90.00
   verbose           = .true.
   /

# This is wide open ... all times get put in the netCDF file
#  first_bin_start =  1601,  1,  1,  0,  0,  0
#  first_bin_end   =  2999,  1,  1,  0,  0,  0
#  last_bin_end    =  2999,  1,  1,  0,  0,  0

&schedule_nml
   calendar        = 'Gregorian'
   first_bin_start =  2009,  1,  1,  0,  0,  0
   first_bin_end   =  2009,  1, 31,  0,  0,  0
   last_bin_end    =  2009,  1, 31,  0,  0,  0
   bin_interval_days    = 1000000
   bin_interval_seconds = 0
   max_num_bins         = 1000
   print_table          = .true.
   /


# possible vertical coordinate systems are:
# VERTISUNDEF VERTISSURFACE VERTISLEVEL VERTISPRESSURE VERTISHEIGHT VERTISSCALEHEIGHT
#   kind_of_interest = 'QTY_TEMPERATURE'
#   kind_of_interest = 'QTY_SALINITY'
#   kind_of_interest = 'QTY_U_CURRENT'
#   kind_of_interest = 'QTY_V_CURRENT'
#   kind_of_interest = 'QTY_DENSITY'

&model_mod_check_nml
   input_state_files     = 'ENS01.2009.oce.nc'
   output_state_files    = 'check_me'
   verbose               = .TRUE.
   test1thru             = 0
   run_tests             = 1, 2, 3, 4, 7
   x_ind                 = 3267068
   loc_of_interest       = 26.0924, 40.1515, 12.01
   quantity_of_interest  = 'QTY_SALINITY'
   interp_test_lonrange  = 22.0, 33.0
   interp_test_dlon      = 0.25
   interp_test_latrange  = 38.0, 43.0
   interp_test_dlat      = 0.25
   interp_test_vertrange = 1.0,  301.0
   interp_test_dvert     = 300.0
   /
