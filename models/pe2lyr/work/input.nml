&perfect_model_obs_nml
   start_from_restart    = .true.,
   output_restart        = .true.,
   async                 = 0,
   init_time_days        = 0,
   init_time_seconds     = 0,
   first_obs_days        = -1,
   first_obs_seconds     = -1,
   last_obs_days         = -1,
   last_obs_seconds      = -1,
   output_interval       = 1,
   restart_in_file_name  = "perfect_ics",
   restart_out_file_name = "perfect_restart",
   obs_seq_in_file_name  = "obs_seq.in",
   obs_seq_out_file_name = "obs_seq.out",
   adv_ens_command       = "./advance_model.csh",
   output_timestamps     = .false.,
   trace_execution       = .false.,
   output_forward_op_errors = .false.,
   print_every_nth_obs   = -1,
   silence               = .false.,
  /

&filter_nml
   async                    = 0,
   adv_ens_command          = "./advance_model.csh",
   ens_size                 = 20,
   start_from_restart       = .true.,
   output_restart           = .true.,
   obs_sequence_in_name     = "obs_seq.out",
   obs_sequence_out_name    = "obs_seq.final",
   restart_in_file_name     = "filter_ics",
   restart_out_file_name    = "filter_restart",
   init_time_days           = 0,
   init_time_seconds        = 0,
   first_obs_days           = -1,
   first_obs_seconds        = -1,
   last_obs_days            = -1,
   last_obs_seconds         = -1,
   num_output_state_members = 20,
   num_output_obs_members   = 0,
   output_interval          = 1,
   num_groups               = 1,
   input_qc_threshold       =  3.0,
   outlier_threshold        =  4.0,
   output_forward_op_errors = .true.,
   output_timestamps        = .false.,
   output_inflation         = .true.,
   trace_execution          = .false.,
   silence                  = .false.,

   inf_flavor                  = 0,                       0,
   inf_initial_from_restart    = .false.,                 .false.,
   inf_sd_initial_from_restart = .false.,                 .false.,
   inf_output_restart          = .true.,                  .true.,
   inf_deterministic           = .true.,                  .true.,
   inf_initial                 = 1.0,                     1.0,
   inf_lower_bound             = 1.0,                     1.0,
   inf_upper_bound             = 1000000.0,               1000000.0,
   inf_damping                 = 1.0,                     1.0,
   inf_sd_initial              = 0.0,                     0.0,
   inf_sd_lower_bound          = 0.0,                     0.0,
   inf_sd_max_change           = 1.05,                    1.05,
/


&ensemble_manager_nml
   single_restart_file_in  = .true.,
   single_restart_file_out = .true.,
   perturbation_amplitude  = 0.2  /

&assim_tools_nml
   filter_kind                     = 1,
   cutoff                          = 0.02,
   sort_obs_inc                    = .false.,
   spread_restoration              = .false.,
   sampling_error_correction       = .false.,
   adaptive_localization_threshold = -1,
   output_localization_diagnostics = .false.,
   localization_diagnostics_file   = 'localization_diagnostics',
   print_every_nth_obs             = 0  /

&cov_cutoff_nml
   select_localization = 1  /

&reg_factor_nml
   select_regression    = 1,
   input_reg_file       = "time_mean_reg",
   save_reg_diagnostics = .false.,
   reg_diagnostics_file = "reg_diagnostics"  /

&obs_sequence_nml
   write_binary_obs_sequence = .false.  /

&obs_kind_nml
   assimilate_these_obs_types = 'U_WIND_COMPONENT',
                                'V_WIND_COMPONENT' ,

   evaluate_these_obs_types   = 'GEOPOTENTIAL_HEIGHT'  /

&location_nml
   horiz_dist_only             = .true.,
   vert_normalization_pressure = 100000.0, 
   vert_normalization_height   = 10000.0,
   vert_normalization_level    = 20.0,
   approximate_distance        = .false.,
   nlon                        = 71,
   nlat                        = 36,
   print_box_level             = 0,
   output_box_info             = .false.  /

&preprocess_nml
    input_obs_kind_mod_file = '../../../assimilation_code/modules/observations/DEFAULT_obs_kind_mod.F90',
   output_obs_kind_mod_file = '../../../assimilation_code/modules/observations/obs_kind_mod.f90',
     input_obs_def_mod_file = '../../../observations/forward_operators/DEFAULT_obs_def_mod.F90',
    output_obs_def_mod_file = '../../../observations/forward_operators/obs_def_mod.f90',
                input_files = '../../../observations/forward_operators/obs_def_pe2lyr_mod.f90' /

&utilities_nml
   TERMLEVEL = 1,
   module_details = .false.,
   logfilename = 'dart_log.out',
   nmlfilename = 'dart_log.nml',
   write_nml   = 'file'  /

&obs_sequence_tool_nml
   filename_seq      = 'obs_seq.out',
   filename_out      = 'obs_seq.processed',
   first_obs_days    = -1,
   first_obs_seconds = -1,
   last_obs_days     = -1,
   last_obs_seconds  = -1,
   print_only        = .false.,
   min_lat           = -90.0,
   max_lat           =  90.0,
   min_lon           =   0.0,
   max_lon           = 360.0,
   gregorian_cal     = .false.
   /

# other possible obs tool namelist items:
#
# keep only the U and V radiosonde winds:
#   obs_types          = 'RADIOSONDE_U_WIND_COMPONENT',
#                        'RADIOSONDE_V_WIND_COMPONENT',
#   keep_types         = .true.,
#
# remove the U and V radiosonde winds:
#   obs_types          = 'RADIOSONDE_U_WIND_COMPONENT',
#                        'RADIOSONDE_V_WIND_COMPONENT',
#   keep_types         = .false.,
#
# keep only observations with a DART QC of 0:
#   qc_metadata        = 'Dart quality control',
#   min_qc             = 0,
#   max_qc             = 0,
#
# keep only radiosonde temp obs between 250 and 300 K:
#   copy_metadata      = 'NCEP BUFR observation',
#   copy_type          = 'RADIOSONDE_TEMPERATURE',
#   min_copy           = 250.0,
#   max_copy           = 300.0,
#


# again - this model doesn't use a calendar.  it starts at
# day 0, seconds 0.  that's equiv to year 1601 in gregorian,
# so use that for now.  but it should allow a no_calendar option.
#
# The times in the namelist for the obs_diag program are vectors
# that follow the following sequence:
# year   month   day   hour   minute   second
# max_num_bins can be used to specify a fixed number of bins,
# in which case last_bin_center should be safely in the future.
#
# Acceptable latitudes range from  [-90,  90]
# Acceptable longitudes range from [  0, Inf]
# 
# currently this fails anyway because the observations are called
# U_WIND_COMPONENT and V_WIND_COMPONENT and in trying to match up
# corresponding wind observations into a single vector, the obs_diag
# program expects a platform name at the start of the obs type and
# fails without one.

&obs_diag_nml
   obs_sequence_name = 'obs_seq.final',
   obs_sequence_list = '',
   first_bin_center =  1601, 1, 1, 0, 0, 0 ,
   last_bin_center  =  9999, 1, 1, 0, 0, 0 ,
   bin_separation   =     0, 0, 0, 0, 0, 0 ,
   bin_width        =     0, 0, 1, 0, 0, 0 ,
   time_to_skip     =     0, 0, 0, 0, 0, 0 ,
   max_num_bins     = 1000,
   trusted_obs      = 'null',
   Nregions   = 3,
   lonlim1    =   0.0,   0.0,   0.0,
   lonlim2    = 360.0, 360.0, 360.0,
   latlim1    =  20.0, -80.0, -20.0,
   latlim2    =  80.0, -20.0,  20.0,
   reg_names  = 'Northern Hemisphere', 'Southern Hemisphere', 'Tropics',
   print_mismatched_locs = .false.,
   create_rank_histogram = .true.,
   outliers_in_histogram = .true.,
   use_zero_error_obs    = .false.,
   verbose               = .true.
   /

# this is what the namelist should probably look like, because
# this model doesn't really have a calendar.  it just increments
# days and seconds.  but the schedule module currently only
# understands models with calendars, so lie to it about using
# a gregorian calendar.  it works just fine - day 0 is year 1601.
#&schedule_nml
#   calendar        = 'no_calendar',
#   first_bin_start =     0,  0,
#   first_bin_end   =  9999,  0,
#   last_bin_end    =  9999,  0,
#   bin_interval_days    = 1000000,
#   bin_interval_seconds = 0,
#   max_num_bins         = 1000,
#   print_table          = .true.
#   /

&schedule_nml
   calendar        = 'Gregorian',
   first_bin_start =  1601,  1,  1,  0,  0,  0,
   first_bin_end   =  2999,  1,  1,  0,  0,  0,
   last_bin_end    =  2999,  1,  1,  0,  0,  0,
   bin_interval_days    = 1000000,
   bin_interval_seconds = 0,
   max_num_bins         = 1000,
   print_table          = .true.
   /


&obs_seq_to_netcdf_nml
   obs_sequence_name = 'obs_seq.final',
   obs_sequence_list = '',
   append_to_netcdf  = .false.,
   lonlim1    =    0.0,
   lonlim2    =  360.0,
   latlim1    =  -90.0,
   latlim2    =   90.0,
   verbose    = .false.
   /

