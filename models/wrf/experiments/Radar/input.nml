&filter_nml
   async                    =  2,
   adv_ens_command          = "./advance_model.csh",
   ens_size                 =  50,
   start_from_restart       = .true.,
   output_restart           = .false.,
   obs_sequence_in_name     = "obs_seq.out",
   obs_sequence_out_name    = "obs_seq.final",
   restart_in_file_name     = "filter_ics",
   restart_out_file_name    = "filter_restart", 
   init_time_days           = -1,
   init_time_seconds        = -1,
   first_obs_days           = -1,
   first_obs_seconds        = -1,
   last_obs_days            = -1,
   last_obs_seconds         = -1,
   num_output_state_members = 0,
   num_output_obs_members   = 0,
   output_interval          = 1,
   num_groups               = 1,
   input_qc_threshold       = 4.0,
   outlier_threshold        = -1.0,
   output_forward_op_errors = .false.,
   output_timestamps        = .false.,
   output_inflation         = .false.,

   inf_flavor                  = 2,                      0,
   inf_initial_from_restart    = .false.,                .false.,
   inf_sd_initial_from_restart = .false.,                .false.,
   inf_output_restart          = .true.,                 .true.,
   inf_deterministic           = .true.,                 .true.,
   inf_in_file_name            = 'prior_inf_ics',        'post_inf_ics',
   inf_out_file_name           = 'prior_inf_restart',    'post_inf_restart',
   inf_diag_file_name          = 'prior_inf_diag',       'post_inf_diag',
   inf_initial                 = 1.00,                   1.00,
   inf_sd_initial              = 0.60,                   0.50,
   inf_damping                 = 0.90,                   1.00, 
   inf_lower_bound             = 1.00,                   1.0,
   inf_upper_bound             = 1000000.0,              1000000.0,
   inf_sd_lower_bound          = 0.60,                   0.10
   /

&ensemble_manager_nml
   single_restart_file_in  = .true.,
   single_restart_file_out = .true.,
   perturbation_amplitude  = 0.2
   /

&smoother_nml
   num_lags              = 0
   start_from_restart    = .false.
   output_restart        = .false.
   restart_in_file_name  = 'smoother_ics'
   restart_out_file_name = 'smoother_restart'
   /

&assim_tools_nml
   filter_kind                     = 1,
   cutoff                          = 0.00047,
   sort_obs_inc                    = .false.,
   spread_restoration              = .false.,
   sampling_error_correction       = .false.,         
   print_every_nth_obs             = 0,
   adaptive_localization_threshold = -1
   /             

&cov_cutoff_nml
   select_localization = 1
   /

&assim_model_nml
   write_binary_restart_files = .true.
   /

&location_nml
   horiz_dist_only             = .false.,
   vert_normalization_pressure = 6666666.7,
   vert_normalization_height   = 6370000.0,
   vert_normalization_level    = 15000.0,
   approximate_distance        = .false.,
   nlon                        = 1201,
   nlat                        = 1201,
   output_box_info             = .false.
   /

&model_nml
   default_state_variables     = .false.
   wrf_state_variables         = 'U',          'QTY_U_WIND_COMPONENT',       'TYPE_U',     'UPDATE', '999',
                                 'V',          'QTY_V_WIND_COMPONENT',       'TYPE_V',     'UPDATE', '999',
                                 'W',          'QTY_VERTICAL_VELOCITY',      'TYPE_W',     'UPDATE', '999',
                                 'PH',         'QTY_GEOPOTENTIAL_HEIGHT',    'TYPE_GZ',    'UPDATE', '999',
                                 'T',          'QTY_POTENTIAL_TEMPERATURE',  'TYPE_T',     'UPDATE', '999',
                                 'MU',         'QTY_PRESSURE',               'TYPE_MU',    'UPDATE', '999',
                                 'QVAPOR',     'QTY_VAPOR_MIXING_RATIO',     'TYPE_QV',    'UPDATE', '999',
                                 'QCLOUD',     'QTY_CLOUD_LIQUID_WATER',     'TYPE_QC',    'UPDATE', '999',
                                 'QRAIN',      'QTY_RAINWATER_MIXING_RATIO', 'TYPE_QR',    'UPDATE', '999',
                                 'QICE',       'QTY_CLOUD_ICE',              'TYPE_QI',    'UPDATE', '999',
                                 'QSNOW',      'QTY_SNOW_MIXING_RATIO',      'TYPE_QS',    'UPDATE', '999',
                                 'QGRAUP',     'QTY_GRAUPEL_MIXING_RATIO',   'TYPE_QG',    'UPDATE', '999',
                                 'H_DIABATIC', 'QTY_CONDENSATIONAL_HEATING', 'TYPE_HDIAB', 'UPDATE', '999',
   wrf_state_bounds    = 'QVAPOR',    '0.0', 'NULL', 'CLAMP',
                         'QRAIN',     '0.0', 'NULL', 'CLAMP',
                         'QCLOUD',    '0.0', 'NULL', 'CLAMP',
                         'QICE',      '0.0', 'NULL', 'CLAMP',
                         'QSNOW',     '0.0', 'NULL', 'CLAMP',
                         'QGRAUP',    '0.0', 'NULL', 'CLAMP',
   num_domains                 = 1,
   calendar_type               = 3,
   assimilation_period_seconds = 120,
   adv_mod_command             = './wrf.exe',
   vert_localization_coord     = 3,
   center_search_half_length = 500000.,
   center_spline_grid_scale    = 10,
   polar                       = .false.,
   periodic_x                  = .false.,
   periodic_y                  = .false.,
   scm                         = .false.
   /

# polar and periodic_x are used in global wrf.  if polar is true, the 
# grid interpolation routines will wrap over the north & south poles.  
# if periodic_x is true, when the east and west edges of the grid are
# reached the interpolation will wrap.  note this is a separate issue
# from regional models which cross the GMT line; those grids are marked
# as having a negative offset and do not need to wrap; this flag controls
# what happens when the edges of the grid are reached.

# the scm flag is used for the 'single column model' version of WRF.
# it needs the periodic_x and periodic_y flags set to true, in which
# case the X and Y directions are periodic; no collapsing of the grid
# into a single location like the 3d-spherical polar flag implies.

&utilities_nml
   TERMLEVEL = 1,
   write_nml   = 'file',
   logfilename = 'dart_log.out',
   nmlfilename = 'dart_log.nml',
   module_details = .true.
   /

&reg_factor_nml
   select_regression = 1,
   input_reg_file = "time_mean_reg",
   save_reg_diagnostics = .false.,
   reg_diagnostics_file = 'reg_diagnostics'
   /

&obs_sequence_nml
   write_binary_obs_sequence = .false.
   /

&preprocess_nml
   overwrite_output        = .true.
   input_obs_qty_mod_file  = '../../../assimilation_code/modules/observations/DEFAULT_obs_kind_mod.F90'
   output_obs_qty_mod_file = '../../../assimilation_code/modules/observations/obs_kind_mod.f90'
   input_obs_def_mod_file  = '../../../observations/forward_operators/DEFAULT_obs_def_mod.F90'
   output_obs_def_mod_file = '../../../observations/forward_operators/obs_def_mod.f90'
   quantity_files          = '../../../assimilation_code/modules/observations/atmosphere_quantities_mod.f90'
   obs_type_files          = '../../../observations/forward_operators/obs_def_reanalysis_bufr_mod.f90',
                             '../../../observations/forward_operators/obs_def_altimeter_mod.f90',
                             '../../../observations/forward_operators/obs_def_radar_mod.f90',
                             '../../../observations/forward_operators/obs_def_metar_mod.f90',
                             '../../../observations/forward_operators/obs_def_dew_point_mod.f90',
                             '../../../observations/forward_operators/obs_def_gps_mod.f90',
                             '../../../observations/forward_operators/obs_def_gts_mod.f90',
                             '../../../observations/forward_operators/obs_def_QuikSCAT_mod.f90',
                             '../../../observations/forward_operators/obs_def_vortex_mod.f90'
   /

&obs_kind_nml
   assimilate_these_obs_types = 'DOPPLER_RADIAL_VELOCITY',
                                'RADAR_REFLECTIVITY'
   /



&obs_def_radar_mod_nml
   apply_ref_limit_to_obs     =  .true. ,
   reflectivity_limit_obs     =     0.0 ,
   lowest_reflectivity_obs    =     0.0 ,
   apply_ref_limit_to_fwd_op  =  .true. ,
   reflectivity_limit_fwd_op  =     0.0 ,
   lowest_reflectivity_fwd_op =     0.0 ,
   dielectric_factor          =   0.224 ,
   n0_rain                    =   8.0e6 ,
   n0_graupel                 =   4.0e6 ,
   n0_snow                    =   3.0e6 ,
   rho_rain                   =  1000.0 ,
   rho_graupel                =   400.0 ,
   rho_snow                   =   100.0 ,
   allow_wet_graupel          = .false.
   /
#   microphysics_type          =       3 ,
#   allow_dbztowt_conv         = .false. /

&obs_def_gps_nml
   max_gpsro_obs = 100000,
  / 

# The times in the namelist for the obs_diag program are vectors
# that follow the following sequence:
# year   month   day   hour   minute   second
# max_num_bins can be used to specify a fixed number of bins,
# in which case last_bin_center should be safely in the future.
#
# Acceptable latitudes range from  [-90,  90]
# Acceptable longitudes range from [  0, Inf]

&obs_diag_nml
   obs_sequence_name = 'obs_seq.final',
   first_bin_center =  1981, 5,17,16,28, 0 ,
   last_bin_center  =  1981, 5,17,17,20, 0 ,
   bin_separation   =     0, 0, 0, 0, 6, 0 ,
   bin_width        =     0, 0, 0, 0, 6, 0 ,
   time_to_skip     =     0, 0, 0, 0, 0, 0 ,
   max_num_bins     = 1000,
   trusted_obs      = 'null',
   Nregions   = 1,
   lonlim1    =   0.0,   0.0,   0.0, 235.0,
   lonlim2    = 360.0, 360.0, 360.0, 295.0,
   latlim1    =  20.0, -80.0, -20.0,  25.0,
   latlim2    =  80.0, -20.0,  20.0,  55.0,
   reg_names  = 'Northern Hemisphere', 'Southern Hemisphere', 'Tropics', 'North America',
   print_mismatched_locs = .false.,
   create_rank_histogram = .true.,
   outliers_in_histogram = .true.,
   use_zero_error_obs    = .false.,
   verbose               = .false.
   /

&obs_sequence_tool_nml
   num_input_files = 1, 
   filename_seq = 'obs_seq.out',
   filename_out = 'obs_seq.processed', 
   first_obs_days = -1, 
   first_obs_seconds = -1, 
   last_obs_days = -1, 
   last_obs_seconds = -1, 
   obs_types = '', 
   keep_types = .false., 
   print_only = .false., 
   min_lat = -90.0, 
   max_lat = 90.0, 
   min_lon = 0.0, 
   max_lon = 360.0
   /

&dart_to_wrf_nml
   model_advance_file = .true.,
   /

