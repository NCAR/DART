&perfect_model_obs_nml
   start_from_restart    = .true.,
   output_restart        = .true.,
   async                 =  2,
   init_time_days        = -1,
   init_time_seconds     = -1,
   first_obs_days        = -1,
   first_obs_seconds     = -1,
   last_obs_days         = -1,
   last_obs_seconds      = -1,
   output_interval       = 1,
   restart_in_file_name  = "perfect_ics",
   restart_out_file_name = "perfect_restart",
   obs_seq_in_file_name  = "obs_seq.in",
   obs_seq_out_file_name = "obs_seq.out",
   adv_ens_command       = "./advance_perfect.sh"
   /

&filter_nml
   async                    = 4,
   adv_ens_command          = "./advance_wrapper.sh",
   ens_size                 = 16,
   start_from_restart       = .false.,
   output_restart           = .true.,
   obs_sequence_in_name     = "obs_seq.out",
   obs_sequence_out_name    = "obs_seq.final",
   restart_in_file_name     = "filter_ics",
   restart_out_file_name    = "assim_model_state_ic",
   init_time_days           = -1,
   init_time_seconds        = -1,
   first_obs_days           = -1,
   first_obs_seconds        = -1,
   last_obs_days            = -1,
   last_obs_seconds         = -1,
   num_output_state_members = 0,
   num_output_obs_members   = 0,
   output_interval          = 1,
   num_groups               = 1,
   input_qc_threshold       =  4.0,
   outlier_threshold        =  4.0,
   output_forward_op_errors = .false.,
   output_timestamps        = .true.,
   output_inflation         = .true.,

   inf_flavor                  =  2,                       0,
   inf_initial_from_restart    = .true.,                  .true.,
   inf_sd_initial_from_restart = .false.,                 .false.,
   inf_output_restart          = .true.,                  .true.,
   inf_deterministic           = .true.,                  .true.,
   inf_in_file_name            = 'prior_inflate_ics',     'post_inflate_ics',
   inf_out_file_name           = 'prior_inflate_restart', 'post_inflate_restart',
   inf_diag_file_name          = 'prior_inflate_diag',    'post_inflate_diag',
   inf_initial                 = 1.50,                    1.025,
   inf_sd_initial              = 0.6,                     0.075,
   inf_damping                 = 0.9,                     1.0,
   inf_lower_bound             = 1.00,                    1.0,
   inf_upper_bound             = 10000,                   1.15,
   inf_sd_lower_bound          = 0.6,                     0.075
   /

&smoother_nml
   num_lags              = 0,
   start_from_restart    = .false.,
   output_restart        = .false.,
   restart_in_file_name  = 'smoother_ics',
   restart_out_file_name = 'smoother_restart'
   /

&assim_tools_nml
   filter_kind                     =  1,
   cutoff                          =  0.125,
   sort_obs_inc                    = .false.,
   spread_restoration              = .false.,
   sampling_error_correction       = .false.,
   adaptive_localization_threshold = -1,
   print_every_nth_obs             = 500,
   /

&cov_cutoff_nml
   select_localization = 1
   /

&obs_sequence_nml
   write_binary_obs_sequence = .false.
   /

&preprocess_nml
   overwrite_output        = .true.
   input_obs_qty_mod_file  = '../../../assimilation_code/modules/observations/DEFAULT_obs_kind_mod.F90'
   output_obs_qty_mod_file = '../../../assimilation_code/modules/observations/obs_kind_mod.f90'
   input_obs_def_mod_file  = '../../../observations/forward_operators/DEFAULT_obs_def_mod.F90'
   output_obs_def_mod_file = '../../../observations/forward_operators/obs_def_mod.f90'
   obs_type_files          = '../../../observations/forward_operators/obs_def_navdas_mod.f90'
   /

&obs_kind_nml
   assimilate_these_obs_types =  'U_RAOB', 'V_RAOB', 'T_RAOB',
                                 'U_DROPSONDE', 'V_DROPSONDE','T_DROPSONDE',
                                 'U_PIBAL', 'V_PIBAL', 'T_PIBAL',
                                 'U_AIREP', 'V_AIREP', 'T_AIREP',
                                 'U_AMDAR', 'V_AMDAR', 'T_AMDAR',
                                 'U_ACARS', 'V_ACARS', 'T_ACARS',
                                 'U_MDCRS', 'V_MDCRS', 'T_MDCRS',
                                 'U_CLD_WNDS1', 'V_CLD_WNDS1',
                                 'U_CLD_WNDS2', 'V_CLD_WNDS2',
                                 'U_METEO', 'V_METEO',
                                 'U_GOES', 'V_GOES',
                                 'T_TOVS_T',
                                 'VORTEX_LAT', 'VORTEX_LON',
                                 'P_SFC_SHIP', 'P_SFC_LAND',
                                 'U_SFC_SHIP', 'V_SFC_SHIP',
                                 'U_WSAT_WIND', 'V_WSAT_WIND',
                                 'U_ASCAT_WIND', 'V_ASCAT_WIND',
   evaluate_these_obs_types   =  'Z_TC_SYNTH','U_TC_SYNTH','V_TC_SYNTH','T_TC_SYNTH',
                                 'TPPW_SSMI','TPPW_WSAT',
   /

# Notes for obs_def_radar_mod_nml:
# (1) Reflectivity limit can be applied to observations and/or state (forward operator).
# (2) Default lowest_reflectivity values DART will use (if apply_reflectivity_limit = .true.)
#     is missing_r8. If you want to use the default, delete the line of respective
#     lowest_reflectivity.
# (3) As it is not clear how to assimilate Z (for now), "convert_to_dbz" is reset to .true.
#     even if you set it to .false. here in the namelist.

&obs_def_radar_mod_nml
   convert_to_dbz            =  .true. ,
   dbz_threshold             =   0.001 ,
   apply_ref_limit_to_obs    = .false. ,
   reflectivity_limit_obs    =     0.0 ,
   lowest_reflectivity_obs   =     0.0 ,
   apply_ref_limit_to_state  = .false. ,
   reflectivity_limit_state  =     0.0 ,
   lowest_reflectivity_state =     0.0
   /

&assim_model_nml
   write_binary_restart_files = .true.
   /  

# Notes for model_nml:
# (1) vert_localization_coord must be one of:
#     1 = model level
#     2 = pressure
#     3 = height

&location_nml
   horiz_dist_only             = .false.,
   vert_normalization_pressure = 6666666.7,
   vert_normalization_height   = 5000000.0,
   vert_normalization_level    = 100000.0,
   approximate_distance        = .false.,
   nlon                        = 71,
   nlat                        = 36,
   output_box_info             = .false.
   /

&utilities_nml
   TERMLEVEL = 1,
   module_details = .false.,
   logfilename = './dart_log.out',
   nmlfilename = './dart_log.nml'
   /

&reg_factor_nml
   select_regression    = 1,
   input_reg_file       = "time_mean_reg",
   save_reg_diagnostics = .false.,
   reg_diagnostics_file = "reg_diagnostics"
   /

&model_nml
   cdtg = '2007012506',
   x_bound_skip = 4,
   y_bound_skip = 4,
   output_interpolation = .false.
   /

&navdas_innov_nml
   innov_file_name = 'innov.out',
   ngt_file_name   = 'ngt.out',
   obs_seq_in_name = 'obs_seq.out'
   /

&ensemble_manager_nml
   single_restart_file_in  = .false.,
   single_restart_file_out = .false.,
   perturbation_amplitude  = 0.2
   /

&merge_obs_seq_nml
   num_input_files = 2,
   filename_seq    = 'obs_seq.one', 'obs_seq.two',
   filename_out    = 'obs_seq.merged'
   /

# The times in the namelist for the obs_diag program are vectors
# that follow the following sequence:
# year   month   day   hour   minute   second
# max_num_bins can be used to specify a fixed number of bins,
# in which case last_bin_center should be safely in the future.
#
# Acceptable latitudes range from  [-90,  90]
# Acceptable longitudes range from [  0, Inf]

&obs_diag_nml
   obs_sequence_name = '',
   obs_sequence_list = 'obs_seq.list',
   first_bin_center =  2008,09,01,00, 0, 0 ,
   last_bin_center  =  2008,09,15,00, 0, 0 ,
   bin_separation   =     0, 0, 0, 6, 0, 0 ,
   bin_width        =     0, 0, 0, 6, 0, 0 ,
   time_to_skip     =     0, 0, 0, 0, 0, 0 ,
   max_num_bins     = 1000,
   trusted_obs      = 'null',
   Nregions   = 1,
   plevel     = 1000.0, 925.0, 850.0, 700.0, 500.0, 400.0, 300.0, 250.0, 200.0, 150.0, 100.0,  70.0,
   lonlim1    =   0.0,
   lonlim2    = 360.0,
   latlim1    =  20.0,
   latlim2    =  80.0,
   reg_names  = 'Europe',
   print_mismatched_locs = .false.,
   create_rank_histogram = .true.,
   outliers_in_histogram = .true.,
   use_zero_error_obs    = .false.,
   verbose               = .false.
   /

&schedule_nml
   calendar        = 'Gregorian',
   first_bin_start =  1601,  1,  1,  0,  0,  0,
   first_bin_end   =  2999,  1,  1,  0,  0,  0,
   last_bin_end    =  2999,  1,  1,  0,  0,  0,
   bin_interval_days    = 1000000,
   bin_interval_seconds = 0,
   max_num_bins         = 1000,
   print_table          = .true.
   /

&obs_seq_to_netcdf_nml
   obs_sequence_name = 'obs_seq.final',
   obs_sequence_list = '',
   append_to_netcdf  = .false.,
   lonlim1    =    0.0,
   lonlim2    =  360.0,
   latlim1    =  -90.0,
   latlim2    =   90.0,
   verbose    = .true.
   /

