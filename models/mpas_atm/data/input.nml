&perfect_model_obs_nml
   read_input_state_from_file = .true.
   single_file_in             = .false.
   input_state_files          = 'mpas_init.nc'
   init_time_days             = -1
   init_time_seconds          = -1

   write_output_state_to_file = .false.
   single_file_out            = .false.
   output_state_files         = 'perfect_restart.nc'
   output_interval            = 1

   async                      = 0
   adv_ens_command            = './advance_model.csh'

   obs_seq_in_file_name       = 'obs_seq.in'
   obs_seq_out_file_name      = 'obs_seq.out'
   first_obs_days             = -1
   first_obs_seconds          = -1
   last_obs_days              = -1
   last_obs_seconds           = -1

   trace_execution            = .true.
   output_timestamps          = .false.
   print_every_nth_obs        = 0
   output_forward_op_errors   = .false.
   silence                    = .false.
  /

&filter_nml
   async                    = 0
   adv_ens_command          = './advance_model.csh'
   ens_size                 = 3
   output_members           = .true.
   obs_sequence_in_name     = 'obs_seq.out'
   obs_sequence_out_name    = 'obs_seq.final'
   input_state_file_list    = 'filter_in.txt'
   output_state_file_list   = 'filter_out.txt'
   init_time_days           = -1
   init_time_seconds        = -1
   first_obs_days           = -1
   first_obs_seconds        = -1
   last_obs_days            = -1
   last_obs_seconds         = -1
   num_output_state_members = 0
   num_output_obs_members   = 3
   output_interval          = 1
   num_groups               = 1
   distributed_state        = .true.
   compute_posterior        = .true.
   output_forward_op_errors = .false.
   output_timestamps        = .false.
   trace_execution          = .false.
   silence                  = .false.

   stages_to_write          = 'preassim', 'output'
   output_members           = .true.
   output_mean              = .true.
   output_sd                = .true.
   write_all_stages_at_end  = .false.

   inf_flavor                  = 2,                       0,
   inf_initial_from_restart    = .false.,                .true.,
   inf_sd_initial_from_restart = .false.,                .true.,
   inf_deterministic           = .true.,                  .true.,
   inf_initial                 = 1.0,                     1.0
   inf_sd_initial              = 0.6,                     0.0
   inf_damping                 = 0.9,                     1.0
   inf_lower_bound             = 1.0,                     1.0
   inf_upper_bound             = 1000.0,               1000000.0
   inf_sd_lower_bound          = 0.6,                     0.0
   inf_sd_max_change           = 1.05,                    1.05,
  /

&quality_control_nml
   input_qc_threshold = 3,
   outlier_threshold  = 3,
   enable_special_outlier_code = .false.
  /

&state_vector_io_nml
   single_precision_output    = .true.,
  /

&mpi_utilities_nml
  /

&smoother_nml
   num_lags              = 0
   start_from_restart    = .true.
   output_restart        = .false.
   restart_in_file_name  = 'smoother_ics'
   restart_out_file_name = 'smoother_restart'
  /

&ensemble_manager_nml
   layout = 1
   tasks_per_node = 36
  /

&assim_tools_nml
   filter_kind                     = 1
   cutoff                          = 0.10
   distribute_mean                 = .false.
   convert_all_obs_verticals_first   = .true.
   convert_all_state_verticals_first = .false.
   sort_obs_inc                    = .false.
   spread_restoration              = .false.
   sampling_error_correction       = .false.
   adaptive_localization_threshold = -1
   output_localization_diagnostics = .false.
   localization_diagnostics_file   = 'localization_diagnostics'
   print_every_nth_obs             = 0
  /

&location_nml
   horiz_dist_only             = .false.
   vert_normalization_pressure = 100000.0
   vert_normalization_height   = 30000.0
   vert_normalization_level    = 20.0
   vert_normalization_scale_height = 2.0
   approximate_distance        = .false.
   nlon                        = 141
   nlat                        = 72
   output_box_info             = .false.
   print_box_level             = 0
  /

&xyz_location_nml
  /

&cov_cutoff_nml
   select_localization = 1
  /

&reg_factor_nml
   select_regression    = 1
   input_reg_file       = 'time_mean_reg'
   save_reg_diagnostics = .false.
   reg_diagnostics_file = 'reg_diagnostics'
  /

&obs_sequence_nml
   write_binary_obs_sequence = .false.
  /

&obs_kind_nml
   assimilate_these_obs_types = 'RADIOSONDE_TEMPERATURE',
                                'RADIOSONDE_U_WIND_COMPONENT',
                                'RADIOSONDE_V_WIND_COMPONENT',
                                'RADIOSONDE_SPECIFIC_HUMIDITY',
                                'GPSRO_REFRACTIVITY',
                                'LAND_SFC_ALTIMETER',
                                'MARINE_SFC_DEWPOINT',
                                'AIRCRAFT_U_WIND_COMPONENT',
                                'AIRCRAFT_V_WIND_COMPONENT',
                                'AIRCRAFT_TEMPERATURE',
                                'ACARS_U_WIND_COMPONENT',
                                'ACARS_V_WIND_COMPONENT',
                                'ACARS_TEMPERATURE',
                                'SAT_U_WIND_COMPONENT',
                                'SAT_V_WIND_COMPONENT',

   evaluate_these_obs_types = ''
  /

&obs_def_gps_nml
   max_gpsro_obs = 100000
  /


&model_nml
   init_template_filename       = 'init.nc'
   assimilation_period_days     = 0
   assimilation_period_seconds  = 21600
   model_perturbation_amplitude = 0.0001
   vert_localization_coord      = 3
   calendar                     = 'Gregorian'
   highest_obs_pressure_mb      = 1.0
   sfc_elev_max_diff            = 100.
   log_p_vert_interp            = .false.
   debug                        = 0
   use_u_for_wind               = .false.
   use_rbf_option               = 2
   update_u_from_reconstruct    = .true.
   use_increments_for_u_update  = .true.
  /

!                          'theta',                 'QTY_POTENTIAL_TEMPERATURE',
!                          'surface_pressure',      'QTY_SURFACE_PRESSURE',
!                          'uReconstructZonal',     'QTY_U_WIND_COMPONENT',
!                          'uReconstructMeridional','QTY_V_WIND_COMPONENT',
!                          'u',                     'QTY_EDGE_NORMAL_SPEED',
!                          'w',                     'QTY_VERTICAL_VELOCITY',
!                          'qv',                    'QTY_VAPOR_MIXING_RATIO',
!                          'qc',                    'QTY_CLOUDWATER_MIXING_RATIO',
!                          'qr',                    'QTY_RAINWATER_MIXING_RATIO',
!                          'qi',                    'QTY_ICE_MIXING_RATIO',
!                          'qs',                    'QTY_SNOW_MIXING_RATIO',
!                          'qg',                    'QTY_GRAUPEL_MIXING_RATIO',
!                          'rho',                   'QTY_DENSITY',
!                          'u10',                   'QTY_10M_U_WIND_COMPONENT',
!                          'v10',                   'QTY_10M_V_WIND_COMPONENT',
!                          't2m',                   'QTY_2M_TEMPERATURE',
!                          'q2',                    'QTY_2M_SPECIFIC_HUMIDITY',

&mpas_vars_nml
   mpas_state_variables = 'theta',                 'QTY_POTENTIAL_TEMPERATURE',
                          'rho',                   'QTY_DENSITY',
                          'uReconstructZonal',     'QTY_U_WIND_COMPONENT',
                          'uReconstructMeridional','QTY_V_WIND_COMPONENT',
                          'w',                     'QTY_VERTICAL_VELOCITY',
                          'qv',                    'QTY_VAPOR_MIXING_RATIO',
                          'surface_pressure',      'QTY_SURFACE_PRESSURE',
   mpas_state_bounds    = 'qv','0.0','NULL','CLAMP',
  /

&update_mpas_states_nml
  update_input_file_list  = 'filter_out.txt'
  update_output_file_list = 'filter_in.txt'
  print_data_ranges      = .true.
  /

&update_bc_nml
  update_analysis_file_list = 'filter_in.txt'
  update_boundary_file_list = 'boundary_inout.txt'
  lbc_update_from_reconstructed_winds = .false.
  lbc_update_winds_from_increments    = .false.
  debug = 0
/

&utilities_nml
   TERMLEVEL = 1
   module_details = .false.
   logfilename = 'dart_log.out'
   nmlfilename = 'dart_log.nml'
   write_nml   = 'file'
  /

&preprocess_nml
   overwrite_output        = .true.
   input_obs_def_mod_file  = '../../../observations/forward_operators/DEFAULT_obs_def_mod.F90'
   output_obs_def_mod_file = '../../../observations/forward_operators/obs_def_mod.f90'
   input_obs_qty_mod_file  = '../../../assimilation_code/modules/observations/DEFAULT_obs_kind_mod.F90'
   output_obs_qty_mod_file = '../../../assimilation_code/modules/observations/obs_kind_mod.f90'
   obs_type_files          = '../../../observations/forward_operators/obs_def_reanalysis_bufr_mod.f90',
                             '../../../observations/forward_operators/obs_def_altimeter_mod.f90',
                             '../../../observations/forward_operators/obs_def_gts_mod.f90',
                             '../../../observations/forward_operators/obs_def_metar_mod.f90',
                             '../../../observations/forward_operators/obs_def_gps_mod.f90',
                             '../../../observations/forward_operators/obs_def_vortex_mod.f90', 
                             '../../../observations/forward_operators/obs_def_rel_humidity_mod.f90', 
                             '../../../observations/forward_operators/obs_def_dew_point_mod.f90'
   quantity_files          = '../../../assimilation_code/modules/observations/atmosphere_quantities_mod.f90'
  /

&obs_sequence_tool_nml
   num_input_files   = 1
   filename_seq      = 'obs_seq.final'
   filename_seq_list = ''
   filename_out      = 'obs_seq.subset'
   first_obs_days    = -1
   first_obs_seconds = -1
   last_obs_days     = -1
   last_obs_seconds  = -1
   print_only        = .false.
   min_lat           = -90.0
   max_lat           =  90.0
   min_lon           =   0.0
   max_lon           = 360.0
   gregorian_cal     = .true.
   keep_types        = .true.
   obs_types = 'RADIOSONDE_TEMPERATURE'
  /

# The times in the namelist for the obs_diag program are vectors
# that follow the following sequence:
# year   month   day   hour   minute   second
# max_num_bins can be used to specify a fixed number of bins,
# in which case last_bin_center should be safely in the future.
#
# keep only the U and V radiosonde winds:
#   obs_types          = 'RADIOSONDE_U_WIND_COMPONENT'
#                        'RADIOSONDE_V_WIND_COMPONENT'
#   keep_types         = .true.
#
# remove the U and V radiosonde winds:
#   obs_types          = 'RADIOSONDE_U_WIND_COMPONENT'
#                        'RADIOSONDE_V_WIND_COMPONENT'
#   keep_types         = .false.
#
# keep only observations with a DART QC of 0:
#   qc_metadata        = 'Dart quality control'
#   min_qc             = 0
#   max_qc             = 0
#
# keep only radiosonde temp obs between 250 and 300 K:
#   copy_metadata      = 'NCEP BUFR observation'
#   copy_type          = 'RADIOSONDE_TEMPERATURE'
#   min_copy           = 250.0
#   max_copy           = 300.0
#


&schedule_nml
   calendar             = 'Gregorian'
   first_bin_start      =  1601,  1,  1,  0,  0,  0
   first_bin_end        =  2999,  1,  1,  0,  0,  0
   last_bin_end         =  2999,  1,  1,  0,  0,  0
   bin_interval_days    = 1000000
   bin_interval_seconds = 0
   max_num_bins         = 1000
   print_table          = .true.
  /


&obs_seq_to_netcdf_nml
   obs_sequence_name = 'obs_seq.final'
   obs_sequence_list = ''
   append_to_netcdf  = .false.
   lonlim1           =    0.0
   lonlim2           =  360.0
   latlim1           =  -90.0
   latlim2           =   90.0
   verbose           = .true.
  /


&obs_diag_nml
   obs_sequence_name  = 'obs_seq.final'
   first_bin_center = 2010,10,23,12,00,00
   last_bin_center  = 2010,10,23,12,00,00
   bin_width        =    0, 0, 1,00,00,00
   time_to_skip     =    0, 0, 0,00,00,00
   trusted_obs      = 'null'
   nregions  = 1
   lonlim1   =   0.0
   lonlim2   = 360.0
   latlim1   = -90.0
   latlim2   =  90.0
   reg_names = 'global'
   create_rank_histogram = .true.
   outliers_in_histogram = .true.
   use_zero_error_obs    = .false.
   verbose               = .true.
  /

&obs_common_subset_nml
   num_to_compare_at_once = 2
   filename_seq           = ''
   filename_seq_list      = ''
   filename_out_suffix    = '.common'
   calendar               = 'Gregorian'
   print_every            = 1000
   dart_qc_threshold      = 3
   print_only             = .false.
  /

# possible vertical coordinate systems are:
# VERTISUNDEF VERTISSURFACE VERTISLEVEL VERTISPRESSURE VERTISHEIGHT VERTISSCALEHEIGHT
   quantity_of_interest = 'QTY_SURFACE_PRESSURE'
   quantity_of_interest = 'QTY_POTENTIAL_TEMPERATURE'
   quantity_of_interest = 'QTY_TEMPERATURE'
   quantity_of_interest = 'QTY_U_WIND_COMPONENT'
   quantity_of_interest = 'QTY_V_WIND_COMPONENT'
   quantity_of_interest = 'QTY_DENSITY'
   quantity_of_interest = 'QTY_VAPOR_MIXING_RATIO'

&model_mod_check_nml
   input_state_files     = 'mpas_init.nc'
   output_state_files    = 'check_me.nc'
   test1thru             = 0
   run_tests             = 1,2,3,4,5,7
   x_ind                 = 300
   loc_of_interest       = 240.0, 0.0, 10000.0
   quantity_of_interest  = 'QTY_U_WIND_COMPONENT'
   interp_test_lonrange  = 0.0, 359.0
   interp_test_dlon      = 1.0
   interp_test_latrange  = -89.0, 89.0
   interp_test_dlat      = 1.0
   interp_test_vertrange = 100.0,  20100.0
   interp_test_dvert     = 2000.0
   interp_test_vertcoord = 'VERTISHEIGHT'
   verbose               = .false.
  /

&exhaustion_nml
   dart_input_file       = 'dart_ics'
   output_file           = 'exhaust'
   advance_time_present  = .FALSE.
   verbose               = .FALSE.
   matlab_out            = .FALSE.
   netcdf_out            = .TRUE.
   kind_of_interest      = 'QTY_U_WIND_COMPONENT'
   interp_test_lonrange  = 0.0, 360.0
   interp_test_dlon      = 1.0
   interp_test_latrange  = -89.0, 89.0
   interp_test_dlat      = 1.0
   interp_test_vertrange = 7000.0, 7000.0
   interp_test_dvert     = 1000.0
   interp_test_vertcoord = 'VERTISHEIGHT'
   hscale                = 100.0
   diff_threshold        = 2.0
   pointcount            = 100000
  /

&obs_seq_coverage_nml
   obs_sequences     = ''
   obs_sequence_list = 'obs_coverage_list.txt'
   obs_of_interest   = 'RADIOSONDE_TEMPERATURE', 'RADIOSONDE_U_WIND_COMPONENT', 'RADIOSONDE_V_WIND_COMPONENT'
   textfile_out      = 'obsdef_mask.txt'
   netcdf_out        = 'obsdef_mask.nc'
   calendar          = 'Gregorian'
   first_analysis    =  2008, 8, 1, 18, 0, 0
   last_analysis     =  2008, 8, 1, 18, 0, 0
   forecast_length_days          = 0
   forecast_length_seconds       = 21600
   verification_interval_seconds = 21600
   temporal_coverage_percent     = 50.0
   lonlim1    =    0.0
   lonlim2    =  360.0
   latlim1    =  -90.0
   latlim2    =   90.0
   verbose    = .true.
   debug      = .false.
  /

# selections_file is a list of obs_defs output
# from the obs_seq_coverage utility.
&obs_selection_nml
   filename_seq          = 'obs_seq.out'
   filename_seq_list     = ''
   filename_out          = 'obs_seq.processed'
   selections_file       = 'obsdef_mask.txt'
   selections_is_obs_seq = .false.
   print_only            = .false.
   calendar              = 'Gregorian'
  /

# one of the other, but not both
   obs_sequences = 'obs_seq.final.2008060100', 'obs_seq.final.2008060112'
   obs_sequence_list = 'obs_forecast_list.txt'
&obs_seq_verify_nml
   obs_sequences     = ''
   obs_sequence_list = 'obs_forecast_list.txt'
   input_template    = 'obsdef_mask.nc'
   netcdf_out        = 'forecast.nc'
   obtype_string     = 'RADIOSONDE_TEMPERATURE'
   print_every       = 20000
   verbose           = .true.
   debug             = .false.
  /

&mpas_dart_obs_preprocess_nml
   file_name_input          = 'obs_seq.old'
   file_name_output         = 'obs_seq.new'
   include_sig_data         = .true.
   superob_aircraft         = .false.
   superob_sat_winds        = .false.
   sfc_elevation_check      = .false.
   overwrite_ncep_sfc_qc    = .false.
   overwrite_ncep_satwnd_qc = .false.
   aircraft_pres_int        = 2500.0
   sat_wind_pres_int        = 2500.0
   sfc_elevation_tol        = 300.0
   obs_pressure_top         = 1.0
   obs_height_top           = 2.0e10
   max_num_obs              = 1000000
   sonde_extra              = 'obs_seq.rawin'
   metar_extra              = 'obs_seq.metar'
   acars_extra              = 'obs_seq.acars'
   land_sfc_extra           = 'obs_seq.land_sfc'
   marine_sfc_extra         = 'obs_seq.marine'
   sat_wind_extra           = 'obs_seq.satwnd'
   profiler_extra           = 'obs_seq.profiler'
   trop_cyclone_extra       = 'obs_seq.tc'
   gpsro_extra              = 'obs_seq.gpsro'
   tc_sonde_radii           = -1.0
   overwrite_obs_time       = .false.
   windowing_obs_time       = .true.
   windowing_int_hour       = 0.5
/

