#!/bin/csh
#
# DART software - Copyright UCAR. This open source software is provided
# by UCAR, "as is", without charge, subject to all terms of use at
# http://www.image.ucar.edu/DAReS/DART/DART_download
#

# ------------------------------------------------------------------------------
# Purpose: run perfect_model_obs to generate synthetic observations for a single
#          time window.
#
# The (resulting) perfect_model.csh script is called by CESM with two arguments:
# 1) the CASEROOT, and
# 2) the assimilation cycle number in this CESM job
# ------------------------------------------------------------------------------
# This template is lightly modified by the setup scripts to be appropriate
# for specific hardware and other configurations. The modified result is
# then given execute permission and is appropriate to use to generate "perfect" observations.
# All of this is automatically performed by the DART-supplied setup scripts.
#
# Tag DART's state output with names using CESM's convention:
#    ${case}.${scomp}.${filetype}[.$dart_file].${date}.nc
#    These should all be named with $scomp = "cam" to distinguish
#    them from the same output from other components in multi-component assims.

# machine-specific dereferencing

if ($?SLURM_JOB_ID) then

   # SLURM environment variables:
   # env | grep SLURM | sort

   setenv ORIGINALDIR $SLURM_SUBMIT_DIR
   setenv     JOBNAME $SLURM_JOB_NAME
   setenv       JOBID $SLURM_JOBID
   setenv     MYQUEUE $SLURM_JOB_PARTITION
   setenv   NODENAMES $SLURM_NODELIST
   setenv LAUNCHCMD "mpirun -np $SLURM_NTASKS -bind-to core"
#  untested method for determining NUMTASKS_PERNODE with SLURM
#  set ANY_OLD_NODE = `head -n 1 $SLURM_NODELIST`
#  setenv NUMTASKS_PERNODE `grep $ANY_OLD_NODE $SLURM_NODELIST | wc -l`

else if ($?PBS_NODEFILE) then

   # PBS environment variables:
   # env | grep PBS | sort

   setenv ORIGINALDIR $PBS_O_WORKDIR
   setenv     JOBNAME $PBS_JOBNAME
   setenv       JOBID $PBS_JOBID
   setenv     MYQUEUE $PBS_O_QUEUE
   setenv     NUMCPUS $NCPUS
   setenv    NUMTASKS `cat  $PBS_NODEFILE | wc -l`
   setenv    NUMNODES `uniq $PBS_NODEFILE | wc -l`
   set ANY_OLD_NODE = `head -n 1 $PBS_NODEFILE`
   setenv    NUMTASKS_PERNODE `grep $ANY_OLD_NODE $PBS_NODEFILE | wc -l`
   setenv  MPIEXEC_MPT_DEBUG 0
   setenv MP_DEBUG_NOTIMEOUT yes
   setenv          LAUNCHCMD mpiexec_mpt

else if ($?LSB_HOSTS) then

   # LSF environment variables:
   # env | grep LS | grep -v LS_COLORS | sort

   setenv ORIGINALDIR $LS_SUBCWD
   setenv     JOBNAME $LSB_OUTPUTFILE:ar
   setenv       JOBID $LSB_JOBID
   setenv     MYQUEUE $LSB_QUEUE
   setenv   NODENAMES ${LSB_HOSTS}
   setenv MP_DEBUG_NOTIMEOUT yes
   setenv LAUNCHCMD mpirun.lsf
#  untested method for determining NUMTASKS_PERNODE with LSF
#  setenv NUMTASKS_PERNODE \
#     `echo $LSB_SUB_RES_REQ | sed -ne '/ptile/s#.*\[ptile=\([0-9][0-9]*\)]#\1#p'`

endif

if ($?JOBNAME) then
   echo "jobname        : $JOBNAME"
   echo "numcpus        : $NUMCPUS"
   echo "numtasks       : $NUMTASKS"
   echo "numnodes       : $NUMNODES"
   echo "tasks_per_node : $NUMTASKS_PERNODE"
   echo " "
endif

# ==============================================================================
# Block 0: Set command environment
# ==============================================================================
# This block is an attempt to localize all the machine-specific
# changes to this script such that the same script can be used
# on multiple platforms. This will help us maintain the script.

echo "`date` -- BEGIN CAM OBSERVATIONS FROM TRUE STATE"

set nonomatch      # suppress "rm" warnings if wildcard does not match anything

setenv CASEROOT $1
cd ${CASEROOT}

# CESM uses C indexing on loops; cycle = [0,....,$DATA_ASSIMILATION_CYCLES - 1]
# "Fix" that here, so the rest of the script isn't confusing.

@ cycle = $2 + 1

setenv scomp                     `./xmlquery COMP_ATM      --value`
setenv CASE                      `./xmlquery CASE          --value`
setenv CAM_DYCORE                `./xmlquery CAM_DYCORE    --value`
setenv EXEROOT                   `./xmlquery EXEROOT       --value`
setenv RUNDIR                    `./xmlquery RUNDIR        --value`
setenv CONT_RUN                  `./xmlquery CONTINUE_RUN  --value`
setenv CHECK_TIMING              `./xmlquery CHECK_TIMING  --value`
setenv DATA_ASSIMILATION_CYCLES  `./xmlquery DATA_ASSIMILATION_CYCLES --value`

# Switch CESM's timer script off for the rest of the forecasts of this job.
# The timer takes a significant amount of time, which grows by ~15 s
# for each cycle.  This can double the cycle time in a 2 week job.

./xmlchange CHECK_TIMING=FALSE

cd ${RUNDIR}

# This next line ultimately specifies the location of the observation files.
set BASEOBSDIR = BOGUSBASEOBSDIR

# Make sure that this script is using standard system commands
# instead of aliases defined by the user.
# If the standard commands are not in the location listed below,
# change the 'set' commands to use them.
# The VERBOSE options are useful for debugging, but are optional because
# some systems don't like the -v option to any of the following.

set   MOVE = '/usr/bin/mv -v'
set   COPY = '/usr/bin/cp -v --preserve=timestamps'
set   LINK = '/usr/bin/ln -s'
set   LIST = '/usr/bin/ls '
set REMOVE = '/usr/bin/rm -r'

# ==============================================================================
# Block 1: Determine time of current model state from file name of member 1
# These are of the form "${CASE}.cam_${ensemble_member}.i.2000-01-06-00000.nc"
# ==============================================================================

# Piping stuff through 'bc' strips off any preceeding zeros.

set FILE = `head -n 1 rpointer.atm`
set FILE = $FILE:r
set ATM_DATE_EXT = $FILE:e
set ATM_DATE     = `echo $FILE:e | sed -e "s#-# #g"`
set ATM_YEAR     = `echo $ATM_DATE[1] | bc`
set ATM_MONTH    = `echo $ATM_DATE[2] | bc`
set ATM_DAY      = `echo $ATM_DATE[3] | bc`
set ATM_SECONDS  = `echo $ATM_DATE[4] | bc`
set ATM_HOUR     = `echo $ATM_DATE[4] / 3600 | bc`

echo "valid time of model is $ATM_YEAR $ATM_MONTH $ATM_DAY $ATM_SECONDS (seconds)"
echo "valid time of model is $ATM_YEAR $ATM_MONTH $ATM_DAY $ATM_HOUR (hours)"

#-------------------------------------------------------------------------
# Determine if current time is a perfect model time.
# If not, return before doing anything.
#-------------------------------------------------------------------------

## TIMECHECK:
if ( $ATM_HOUR == 0 || $ATM_HOUR == 6 || $ATM_HOUR == 12 || $ATM_HOUR == 18) then
   echo "Hour is $ATM_HOUR so we are generating perfect obs for the atmosphere"
else
   echo "Hour is not 0,6,12 or 18Z so we are skipping generating perfect obs for the atmosphere"
   echo "`date` -- END   GENERATE CAM TRUE STATE"
   exit 0
endif

#=========================================================================
# Block 2: Populate a run-time directory with the input needed to run DART.
#
# DART namelist settings required:
# &perfect_model_obs_nml:  
#   read_input_state_from_file = .true.
#   input_state_files          = "cam_initial.nc"
#   write_output_state_to_file = .true.
#   output_state_files         = "true_state.nc"
#   obs_seq_in_file_name       = 'obs_seq.in'
#   obs_seq_out_file_name      = 'obs_seq.out'
#   init_time_days          = -1,
#   init_time_seconds       = -1,
#   first_obs_days          = -1,
#   first_obs_seconds       = -1,
#   last_obs_days           = -1,
#   last_obs_seconds        = -1,
#=========================================================================

if ( -e ${CASEROOT}/input.nml ) then
   sed -e '1i\WARNING: Changes to this file will be ignored. '   \
       -e '1i\         Edit \$CASEROOT/input.nml instead.\n\n\n' \
      ${CASEROOT}/input.nml >! input.nml  || exit 10
else
   echo "ERROR ... DART required file ${CASEROOT}/input.nml not found ... ERROR"
   echo "ERROR ... DART required file ${CASEROOT}/input.nml not found ... ERROR"
   exit 11
endif



# ==============================================================================
# Block 3: Get observation sequence file ... or die right away.
# The observation file names have a time that matches the stopping time of CAM.
#-----------------------------------------------------------------------------

set YYYYMM   = `printf %04d%02d                ${ATM_YEAR} ${ATM_MONTH}`
set OBSFNAME = `printf obs_seq%04d%02d%02d%02d ${ATM_YEAR} ${ATM_MONTH} ${ATM_DAY} ${ATM_HOUR}`
set OBS_FILE = ${BASEOBSDIR}/${YYYYMM}_6H/${OBSFNAME}
echo "OBS_FILE = $OBS_FILE"

${REMOVE} obs_seq.in
if (  -e   ${OBS_FILE} ) then
   ${LINK} ${OBS_FILE} obs_seq.in || exit 80
else
   echo "ERROR ... no observation file ${OBS_FILE}"
   echo "ERROR ... no observation file ${OBS_FILE}"
   exit 81
endif

# ==============================================================================
# Block 4: Input needed by static_init_model

set MYSTRING = `grep cam_template_filename input.nml`
set MYSTRING = `echo $MYSTRING | sed -e "s#[=,']# #g"`
set CAMINPUT = $MYSTRING[2]
${REMOVE} ${CAMINPUT}
${LINK} ${CASE}.cam.i.${ATM_DATE_EXT}.nc ${CAMINPUT} || exit 90

# All of the .h0. files contain the same PHIS field, so we can link to any of them.

set HISTS = `${LIST} ${CASE}.cam.h0.*.nc`
set MYSTRING = `grep cam_phis_filename input.nml`
set MYSTRING = `echo $MYSTRING | sed -e "s#[=,']# #g"`
set CAM_PHIS = $MYSTRING[2]
${REMOVE} ${CAM_PHIS}
${LINK} $HISTS[1] ${CAM_PHIS} || exit 100


#=========================================================================
# Block 5: Advance the model and harvest the synthetic observations.

#=========================================================================
# WARNING: the default mode of this script assumes that
#          input_state_file_list = output_state_file_list, so that
#          the CAM initial files used as input to filter will be overwritten.
# ==============================================================================

# In the default mode of CAM assimilations, perfect_model_obs gets the model state
# from CAM initial files.  
set line = `grep input_state_files input.nml | sed -e "s#[=,'\.]# #g"`
set input_file_list_name = $line[2]

set line = `grep output_state_files input.nml | sed -e "s#[=,'\.]# #g"`
set output_file_list_name = $line[2]

if ($input_file_list_name == $output_file_list_name) then
   echo "ERROR: input_file_list_name is a CAM initial file. "
   echo "       output_file_list_name is a state vector file (true state here)"
   echo "       Do you really want to overwrite the former?"
   exit 130
endif

echo "`date` -- BEGIN CAM PERFECT_MODEL_OBS"
${LAUNCHCMD} ${EXEROOT}/perfect_model_obs  || exit 140
echo "`date` -- END CAM PERFECT_MODEL_OBS"

# output files are:
#    true_state.nc   ...... the DART state
#    obs_seq.out     ...... the synthetic observations
#    dart_log.out    ...... run-time output of all DART routines
# Files without instance numbers need to have the scomp part of their names = "dart".
# This is because in st_archive, all files with  scomp = "cam"
# (= compname in env_archive.xml) will be st_archived using a pattern
# which has the instance number added onto it.  True_state files don't have 
# instance numbers, so they need to be archived by the "dart" section of env_archive.xml.
# But they still need to be different for each component, so include $scomp in the
# ".dart_file" part of the file name.  Somewhat awkward and inconsistent, but effective.

# "true_state.nc" could be harvested from input.nml:output_state_files, 
# for more flexibility and robustness.
${MOVE} true_state.nc ${CASE}.dart.e.${scomp}_true_state.${ATM_DATE_EXT}.nc || exit 160

# These are not put into CESM file name format because they should not be archived
# by st_archive.  They'll be moved to, e.g. $obs/Synthetic/UVTRadiosonde_3456/201712_6H/
# and should not have a CAM specific name (for future use by filter).
set MYSTRING = `grep obs_seq_out_file_name input.nml`
set MYSTRING = `echo $MYSTRING | sed -e "s#[=,']# #g" | sed -e 's#"# #g'`
set obs_seq_out_file_name = $MYSTRING[2]
${MOVE} $obs_seq_out_file_name  obs_seq.${ATM_DATE_EXT}.out

${MOVE} dart_log.out     cam_dart_log.${ATM_DATE_EXT}.out

#=========================================================================
# Block 4: Update the cam restart file

# CAM starts from the initial file name specified in atm_in:ncdata,
# but writes an initial file at the end which has a CESM convention name.
# That file needs to be linked to the namelist file name.
# The first cycle link is made by state_cesm_files.
# The subsequent links are made here.
#=========================================================================

# "cam_initial.nc" could be harvested from input.nml:input_state_files, 
# for more flexibility and robustness.
${REMOVE} ${scomp}_initial.nc
${LINK} ${CASE}.${scomp}.i.${ATM_DATE_EXT}.nc ${scomp}_initial.nc || exit 210

#-------------------------------------------------------------------------
# Cleanup
#-------------------------------------------------------------------------

# Restore CESM's timing logic for the first cycle of the next job.
cd ${CASEROOT}
./xmlchange CHECK_TIMING=${CHECK_TIMING}
cd ${RUNDIR}

# Remove lines of blanks and extra spaces.
# ${REMOVE} dart_log.nml
sed -e '/^[ ]\+$/d' \
    -e 's/\([A-Za-z0-9,=]\)[ ]\+/\1 /g' \
    dart_log.nml >! short
${MOVE} short dart_log.nml

echo "`date` -- END CAM OBERVATIONS FROM TRUE STATE"

exit 0


