&perfect_model_obs_nml
   read_input_state_from_file = .true.
   single_file_in             = .false.
   input_state_files          = "roms_input.nc"
   init_time_days             = -1
   init_time_seconds          = -1

   write_output_state_to_file = .false.
   single_file_out            = .false.
   output_state_files         = "roms_output.nc"
   output_interval            = 1

   async                      = 0
   adv_ens_command            = "DART_trying_to_advance_ROMS_not_supported"

   obs_seq_in_file_name       = "obs_seq.in"
   obs_seq_out_file_name      = "obs_seq.out"
   first_obs_days             = -1
   first_obs_seconds          = -1
   last_obs_days              = -1
   last_obs_seconds           = -1

   trace_execution            = .false.
   output_timestamps          = .false.
   print_every_nth_obs        = -1
   output_forward_op_errors   = .false.
   silence                    = .false.
  /


&filter_nml
   async                    = 0
   adv_ens_command          = "DART_trying_to_advance_ROMS_not_supported"
   ens_size                 = 3
   obs_sequence_in_name     = "obs_seq.out"
   obs_sequence_out_name    = "obs_seq.final"
   init_time_days           = -1
   init_time_seconds        = -1
   first_obs_days           = -1
   first_obs_seconds        = -1
   last_obs_days            = -1
   last_obs_seconds         = -1
   obs_window_days          = 2
   obs_window_seconds       = 0
   num_output_obs_members   = 3
   output_interval          = 1
   num_groups               = 1
   distributed_state        = .true.
   compute_posterior        = .true.
   output_forward_op_errors = .false.
   output_timestamps        = .false.
   trace_execution          = .true.
   silence                  = .false.

   input_state_file_list    = "restart_files.txt"
   output_state_file_list   = "restart_files.txt"
   stages_to_write          = 'preassim', 'output'
   output_members           = .true.
   output_mean              = .true.
   output_sd                = .true.
   write_all_stages_at_end  = .false.
   num_output_state_members = 0

   inf_flavor                  = 0,                       0
   inf_initial_from_restart    = .false.,                 .false.
   inf_sd_initial_from_restart = .false.,                 .false.
   inf_initial                 = 1.0,                     1.0
   inf_lower_bound             = 1.0,                     1.0
   inf_upper_bound             = 1000.0,                  1000.0
   inf_damping                 = 0.9,                     0.9
   inf_sd_initial              = 0.6,                     0.6
   inf_sd_lower_bound          = 0.6,                     0.6
   inf_sd_max_change           = 1.05,                    1.05
  /


&state_vector_io_nml
   buffer_state_io = .false.
   single_precision_output = .false.
  /


&smoother_nml
  /


&ensemble_manager_nml
  /


&assim_tools_nml
   filter_kind                     = 1
   cutoff                          = 0.02
   sort_obs_inc                    = .false.
   spread_restoration              = .false.
   sampling_error_correction       = .true.
   adaptive_localization_threshold = -1
   output_localization_diagnostics = .false.
   localization_diagnostics_file   = 'localization_diagnostics'
   print_every_nth_obs             = 1000
  /


&cov_cutoff_nml
   select_localization = 1
  /


&reg_factor_nml
   select_regression    = 1
   input_reg_file       = "time_mean_reg"
   save_reg_diagnostics = .false.
   reg_diagnostics_file = "reg_diagnostics"
  /


&obs_sequence_nml
   write_binary_obs_sequence = .false.
  /


&convert_roms_obs_nml
   ens_size               = 3
   roms_mod_obs_filelist  = 'precomputed_files.txt'
   dart_output_obs_file   = 'obs_seq.out'
   append_to_existing     = .false.
   use_precomputed_values = .true.
   add_random_noise       = .false.
   pert_amplitude         = 0.01
   verbose                = 1
   type_translations = "gridded AVISO sea level ",                  "SATELLITE_SSH",
                       "AVHRR pathfinder SST ",                     "SATELLITE_INFRARED_SST",
                       "GOES SST ",                                 "SATELLITE_INFRARED_SST",
                       "AMSR SST ",                                 "SATELLITE_MICROWAVE_SST",
                       "Super SST observation ",                    "SATELLITE_BLENDED_SST",
                       "GTSPP EN3 temperature",                     "TEMPERATURE",
                       "GTSPP EN3 salinity",                        "SALINITY",
                       "WOD05 EN3 temperature",                     "TEMPERATURE",
                       "WOD05 EN3 salinity",                        "SALINITY",
                       "ASBO EN3 temperature",                      "TEMPERATURE",
                       "ASBO EN3 salinity",                         "SALINITY",
                       "ARGOR EN3 real time temperature",           "ARGO_TEMPERATURE",
                       "ARGOR EN3 real time salinity",              "ARGO_SALINITY",
                       "ARGOA EN3 real time adjusted temperature",  "ARGO_TEMPERATURE",
                       "ARGOA EN3 real time adjusted salinity",     "ARGO_SALINITY",
                       "ARGOD EN3 delayed mode temperature",        "ARGO_TEMPERATURE",
                       "ARGOD EN3 delayed mode salinity",           "ARGO_SALINITY",
                       "ARGO EN3 misc temperature",                 "ARGO_TEMPERATURE",
                       "ARGO EN3 misc salinity",                    "ARGO_SALINITY",
                       "TOPP APB temperature",                      "ARGO_TEMPERATURE",
                       "MODIS SST ",                                "SATELLITE_INFRARED_SST"
  /

   type_translations = "gridded AVISO sea level anomaly (zeta)", "SATELLITE_SSH",
                       "gridded Aquarius SSS (salinity)",        "SATELLITE_SSS",
                       "XBT from Met Office (temperature)",      "XBT_TEMPERATURE",
                       "CTD from Met Office (temperature)",      "CTD_TEMPERATURE",
                       "CTD from Met Office (salinity)",         "CTD_SALINITY",
                       "ARGO floats (temperature)",              "ARGO_TEMPERATURE",
                       "ARGO floats (salinity)",                 "ARGO_SALINITY",
                       "glider UCSD (temperature)",              "GLIDER_TEMPERATURE",
                       "glider UCSD (salinity)",                 "GLIDER_SALINITY",
                       "blended satellite SST (temperature)",    "SATELLITE_BLENDED_SST"

&obs_kind_nml
   evaluate_these_obs_types   =          'TEMPERATURE'
   assimilate_these_obs_types =          'SATELLITE_SSH',
                                         'SATELLITE_SSS',
                                         'XBT_TEMPERATURE',
                                         'CTD_TEMPERATURE',
                                         'CTD_SALINITY',
                                         'ARGO_TEMPERATURE',
                                         'ARGO_SALINITY',
                                         'GLIDER_TEMPERATURE',
                                         'GLIDER_SALINITY',
                                         'SATELLITE_BLENDED_SST',
                                         'SATELLITE_MICROWAVE_SST',
                                         'SATELLITE_INFRARED_SST'
   use_precomputed_FOs_these_obs_types = 'SATELLITE_SSH',
                                         'SATELLITE_SSS',
                                         'XBT_TEMPERATURE',
                                         'CTD_TEMPERATURE',
                                         'CTD_SALINITY',
                                         'ARGO_TEMPERATURE',
                                         'ARGO_SALINITY',
                                         'GLIDER_TEMPERATURE',
                                         'GLIDER_SALINITY',
                                         'SATELLITE_BLENDED_SST',
                                         'SATELLITE_MICROWAVE_SST',
                                         'SATELLITE_INFRARED_SST'
  /


# Each variable must have 5 entries.
# 1: variable name
# 2: DART KIND
# 3: minimum value - as a character string - if none, use 'NA'
# 4: maximum value - as a character string - if none, use 'NA'
# 5: does the variable get updated in the restart file or not ...
#    only variables from restart files may be updated.
#    'UPDATE' =>        update the variable in the restart file
#    'NO_COPY_BACK' => do not update the variable in the restart file
#    all these variables will be updated INTERNALLY IN DART
#    only variables marked 'UPDATE' will be modified for ROMS.

&model_nml
   roms_filename               = 'roms_input.nc'
   assimilation_period_days    = 8
   assimilation_period_seconds = 0
   vert_localization_coord     = 3
   debug                       = 1
   variables = 'temp',   'QTY_TEMPERATURE',          'NA', 'NA', 'update',
               'salt',   'QTY_SALINITY',            '0.0', 'NA', 'update',
               'u',      'QTY_U_CURRENT_COMPONENT',  'NA', 'NA', 'update',
               'v',      'QTY_V_CURRENT_COMPONENT',  'NA', 'NA', 'update',
               'zeta',   'QTY_SEA_SURFACE_HEIGHT'    'NA', 'NA', 'update',
  /


&location_nml
   horiz_dist_only             = .false.
   vert_normalization_pressure = 100000.0
   vert_normalization_height   = 10000.0
   vert_normalization_level    = 20.0
   approximate_distance        = .false.
   nlon                        = 71
   nlat                        = 36
   output_box_info             = .true.
  /


&utilities_nml
   TERMLEVEL = 1
   module_details = .false.
   logfilename = 'dart_log.out'
   nmlfilename = 'dart_log.nml'
   write_nml   = 'file'
  /


&preprocess_nml
   input_obs_def_mod_file  = '../../../observations/forward_operators/DEFAULT_obs_def_mod.F90'
   output_obs_def_mod_file = '../../../observations/forward_operators/obs_def_mod.f90'
   input_obs_qty_mod_file  = '../../../assimilation_code/modules/observations/DEFAULT_obs_kind_mod.F90'
   output_obs_qty_mod_file = '../../../assimilation_code/modules/observations/obs_kind_mod.f90'
   obs_type_files          = '../../../observations/forward_operators/obs_def_ocean_mod.f90'
   quantity_files          = '../../../assimilation_code/modules/observations/ocean_quantities_mod.f90'
  /


&obs_sequence_tool_nml
   num_input_files   = 2
   filename_seq      = 'obs_seq.one', 'obs_seq.two'
   filename_out      = 'obs_seq.processed'
   first_obs_days    = -1
   first_obs_seconds = -1
   last_obs_days     = -1
   last_obs_seconds  = -1
   print_only        = .false.
   min_lat           = -90.0
   max_lat           =  90.0
   min_lon           =   0.0
   max_lon           = 360.0
   gregorian_cal     = .true.
  /


# The times in the namelist for the obs_diag program are vectors
# that follow the following sequence:
# year   month   day   hour   minute   second
# max_num_bins can be used to specify a fixed number of bins,
# in which case last_bin_center should be safely in the future.
#
# Acceptable latitudes range from  [-90,  90]
# Acceptable longitudes range from [  0, Inf]
# hlevel_edges should be changed to more realistic values for ROMS

&obs_diag_nml
   obs_sequence_name = ''
   obs_sequence_list = 'obs_seq_files.txt'
   first_bin_center  =  2013, 1,  1, 0, 0, 0
   last_bin_center   =  2013, 1, 31, 0, 0, 0
   bin_separation    =     0, 0,  2, 0, 0, 0
   bin_width         =     0, 0,  2, 0, 0, 0
   time_to_skip      =     0, 0,  0, 0, 0, 0
   max_num_bins = 1000
   trusted_obs  = 'null'
   Nregions     = 1
   lonlim1      =     0.0
   lonlim2      =   360.0
   latlim1      =   -90.0
   latlim2      =    90.0
   reg_names    = 'WC13'
   hlevel_edges = -5000.0, -2000.0, -1000.0, -500.0, -200.0, -100.0, -50.0, -20.0, -10.0, 1.0
   print_mismatched_locs = .false.
   create_rank_histogram = .true.
   outliers_in_histogram = .true.
   use_zero_error_obs    = .false.
   verbose               = .true.
  /


&schedule_nml
   calendar        = 'Gregorian'
   first_bin_start =  1601,  1,  1,  0,  0,  0
   first_bin_end   =  2999,  1,  1,  0,  0,  0
   last_bin_end    =  2999,  1,  1,  0,  0,  0
   bin_interval_days    = 1000000
   bin_interval_seconds = 0
   max_num_bins         = 1000
   print_table          = .true.
  /


&obs_seq_to_netcdf_nml
   obs_sequence_name = ''
   obs_sequence_list = 'obs_seq_files.txt'
   append_to_netcdf  = .false.
   lonlim1    =    0.0
   lonlim2    =  360.0
   latlim1    =  -90.0
   latlim2    =   90.0
   verbose    = .true.
  /


&quality_control_nml
   input_qc_threshold       =  3.0
   enable_special_outlier_code = .false.
   outlier_threshold        = -1.0
/


&forward_operator_nml
/

   kind_of_interest      = 'QTY_U_CURRENT_COMPONENT'
                            QTY_SEA_SURFACE_HEIGHT
   x_ind                 = 4210 #TEMP (229, 36.6667, 4.xx)
   x_ind                 = 367400 # SSH (229 36.6667)
   x_ind                 = 93530
   x_ind                 = 124330


&model_mod_check_nml
   input_state_files     = 'roms_input.nc'
   output_state_files    = 'mmc_output.nc'
   test1thru             = 0
   run_tests             = 1,2,3,4
   x_ind                 = 87370
   loc_of_interest       = 231.0, 40.0, 10.0
   quantity_of_interest  = 'QTY_U_CURRENT_COMPONENT'
   interp_test_dlon      = 0.1
   interp_test_dlat      = 0.1
   interp_test_dvert     = 5.0
   interp_test_lonrange  = 205.0,  226.0
   interp_test_latrange  =  30.0,   47.0
   interp_test_vertrange =  0.0,    10.0
   interp_test_vertcoord = 'VERTISHEIGHT'
   verbose               = .false.
  /


&test_grid_nml
   x_ind                 = 87370
   loc_of_interest       = 16.0500, 35.1000, 2.5
   kind_of_interest      = 'QTY_CLOUD_ICE'
   interp_test_di        = 0.5
   interp_test_dj        = 0.5
   interp_test_dk        = 1.0
   interp_test_irange    = 0.0, 56.0
   interp_test_jrange    = 0.0, 56.0
   interp_test_krange    = 0.0, 31.0
   interp_test_vertcoord = 'VERTISHEIGHT'
   test1thru             = 5
   restart_in_file_name  = '../Data/wc13_ini.nc'
   restart_out_file_name = 'roms_output'
   verbose               = .false.
  /

